{"ast":null,"code":"const YEAR = 'year';\nconst MONTH = 'month';\nconst DAY = 'day';\nconst HOUR = 'hour';\nconst MINUTE = 'minute';\nconst SECOND = 'second';\nconst MILLISECOND = 'millisecond';\nconst month_names = {\n  en: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n  ru: ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь']\n};\nexport default {\n  parse(date, date_separator = '-', time_separator = /[.:]/) {\n    if (date instanceof Date) {\n      return date;\n    }\n\n    if (typeof date === 'string') {\n      let date_parts, time_parts;\n      const parts = date.split(' ');\n      date_parts = parts[0].split(date_separator).map(val => parseInt(val, 10));\n      time_parts = parts[1] && parts[1].split(time_separator); // month is 0 indexed\n\n      date_parts[1] = date_parts[1] - 1;\n      let vals = date_parts;\n\n      if (time_parts && time_parts.length) {\n        if (time_parts.length === 4) {\n          time_parts[3] = '0.' + time_parts[3];\n          time_parts[3] = parseFloat(time_parts[3]) * 1000;\n        }\n\n        vals = vals.concat(time_parts);\n      }\n\n      return new Date(...vals);\n    }\n  },\n\n  to_string(date, with_time = false) {\n    if (!(date instanceof Date)) {\n      throw new TypeError('Invalid argument type');\n    }\n\n    const vals = this.get_date_values(date).map((val, i) => {\n      if (i === 1) {\n        // add 1 for month\n        val = val + 1;\n      }\n\n      if (i === 6) {\n        return padStart(val + '', 3, '0');\n      }\n\n      return padStart(val + '', 2, '0');\n    });\n    const date_string = `${vals[0]}-${vals[1]}-${vals[2]}`;\n    const time_string = `${vals[3]}:${vals[4]}:${vals[5]}.${vals[6]}`;\n    return date_string + (with_time ? ' ' + time_string : '');\n  },\n\n  format(date, format_string = 'YYYY-MM-DD HH:mm:ss.SSS', lang = 'en') {\n    const values = this.get_date_values(date).map(d => padStart(d, 2, 0));\n    const format_map = {\n      YYYY: values[0],\n      MM: padStart(+values[1] + 1, 2, 0),\n      DD: values[2],\n      HH: values[3],\n      mm: values[4],\n      ss: values[5],\n      SSS: values[6],\n      D: values[2],\n      MMMM: month_names[lang][+values[1]],\n      MMM: month_names[lang][+values[1]]\n    };\n    let str = format_string;\n    const formatted_values = [];\n    Object.keys(format_map).sort((a, b) => b.length - a.length) // big string first\n    .forEach(key => {\n      if (str.includes(key)) {\n        str = str.replace(key, `$${formatted_values.length}`);\n        formatted_values.push(format_map[key]);\n      }\n    });\n    formatted_values.forEach((value, i) => {\n      str = str.replace(`$${i}`, value);\n    });\n    return str;\n  },\n\n  diff(date_a, date_b, scale = DAY) {\n    let milliseconds, seconds, hours, minutes, days, months, years;\n    milliseconds = date_a - date_b;\n    seconds = milliseconds / 1000;\n    minutes = seconds / 60;\n    hours = minutes / 60;\n    days = hours / 24;\n    months = days / 30;\n    years = months / 12;\n\n    if (!scale.endsWith('s')) {\n      scale += 's';\n    }\n\n    return Math.floor({\n      milliseconds,\n      seconds,\n      minutes,\n      hours,\n      days,\n      months,\n      years\n    }[scale]);\n  },\n\n  today() {\n    const vals = this.get_date_values(new Date()).slice(0, 3);\n    return new Date(...vals);\n  },\n\n  now() {\n    return new Date();\n  },\n\n  add(date, qty, scale) {\n    qty = parseInt(qty, 10);\n    const vals = [date.getFullYear() + (scale === YEAR ? qty : 0), date.getMonth() + (scale === MONTH ? qty : 0), date.getDate() + (scale === DAY ? qty : 0), date.getHours() + (scale === HOUR ? qty : 0), date.getMinutes() + (scale === MINUTE ? qty : 0), date.getSeconds() + (scale === SECOND ? qty : 0), date.getMilliseconds() + (scale === MILLISECOND ? qty : 0)];\n    return new Date(...vals);\n  },\n\n  start_of(date, scale) {\n    const scores = {\n      [YEAR]: 6,\n      [MONTH]: 5,\n      [DAY]: 4,\n      [HOUR]: 3,\n      [MINUTE]: 2,\n      [SECOND]: 1,\n      [MILLISECOND]: 0\n    };\n\n    function should_reset(_scale) {\n      const max_score = scores[scale];\n      return scores[_scale] <= max_score;\n    }\n\n    const vals = [date.getFullYear(), should_reset(YEAR) ? 0 : date.getMonth(), should_reset(MONTH) ? 1 : date.getDate(), should_reset(DAY) ? 0 : date.getHours(), should_reset(HOUR) ? 0 : date.getMinutes(), should_reset(MINUTE) ? 0 : date.getSeconds(), should_reset(SECOND) ? 0 : date.getMilliseconds()];\n    return new Date(...vals);\n  },\n\n  clone(date) {\n    return new Date(...this.get_date_values(date));\n  },\n\n  get_date_values(date) {\n    return [date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()];\n  },\n\n  get_days_in_month(date) {\n    const no_of_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    const month = date.getMonth();\n\n    if (month !== 1) {\n      return no_of_days[month];\n    } // Feb\n\n\n    const year = date.getFullYear();\n\n    if (year % 4 === 0 && year % 100 !== 0 || year % 400 === 0) {\n      return 29;\n    }\n\n    return 28;\n  }\n\n}; // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart\n\nfunction padStart(str, targetLength, padString) {\n  str = str + '';\n  targetLength = targetLength >> 0;\n  padString = String(typeof padString !== 'undefined' ? padString : ' ');\n\n  if (str.length > targetLength) {\n    return String(str);\n  } else {\n    targetLength = targetLength - str.length;\n\n    if (targetLength > padString.length) {\n      padString += padString.repeat(targetLength / padString.length);\n    }\n\n    return padString.slice(0, targetLength) + String(str);\n  }\n}","map":{"version":3,"sources":["C:/Mikutech/mikutechWebProgrammingTest2/src/frappe-gantt/date_utils.js"],"names":["YEAR","MONTH","DAY","HOUR","MINUTE","SECOND","MILLISECOND","month_names","en","ru","parse","date","date_separator","time_separator","Date","date_parts","time_parts","parts","split","map","val","parseInt","vals","length","parseFloat","concat","to_string","with_time","TypeError","get_date_values","i","padStart","date_string","time_string","format","format_string","lang","values","d","format_map","YYYY","MM","DD","HH","mm","ss","SSS","D","MMMM","MMM","str","formatted_values","Object","keys","sort","a","b","forEach","key","includes","replace","push","value","diff","date_a","date_b","scale","milliseconds","seconds","hours","minutes","days","months","years","endsWith","Math","floor","today","slice","now","add","qty","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","start_of","scores","should_reset","_scale","max_score","clone","get_days_in_month","no_of_days","month","year","targetLength","padString","String","repeat"],"mappings":"AAAA,MAAMA,IAAI,GAAG,MAAb;AACA,MAAMC,KAAK,GAAG,OAAd;AACA,MAAMC,GAAG,GAAG,KAAZ;AACA,MAAMC,IAAI,GAAG,MAAb;AACA,MAAMC,MAAM,GAAG,QAAf;AACA,MAAMC,MAAM,GAAG,QAAf;AACA,MAAMC,WAAW,GAAG,aAApB;AAEA,MAAMC,WAAW,GAAG;AAChBC,EAAAA,EAAE,EAAE,CACA,SADA,EAEA,UAFA,EAGA,OAHA,EAIA,OAJA,EAKA,KALA,EAMA,MANA,EAOA,MAPA,EAQA,QARA,EASA,WATA,EAUA,SAVA,EAWA,UAXA,EAYA,UAZA,CADY;AAehBC,EAAAA,EAAE,EAAE,CACA,QADA,EAEA,SAFA,EAGA,MAHA,EAIA,QAJA,EAKA,KALA,EAMA,MANA,EAOA,MAPA,EAQA,QARA,EASA,UATA,EAUA,SAVA,EAWA,QAXA,EAYA,SAZA;AAfY,CAApB;AA+BA,eAAe;AACXC,EAAAA,KAAK,CAACC,IAAD,EAAOC,cAAc,GAAG,GAAxB,EAA6BC,cAAc,GAAG,MAA9C,EAAsD;AACvD,QAAIF,IAAI,YAAYG,IAApB,EAA0B;AACtB,aAAOH,IAAP;AACH;;AACD,QAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC1B,UAAII,UAAJ,EAAgBC,UAAhB;AACA,YAAMC,KAAK,GAAGN,IAAI,CAACO,KAAL,CAAW,GAAX,CAAd;AAEAH,MAAAA,UAAU,GAAGE,KAAK,CAAC,CAAD,CAAL,CACRC,KADQ,CACFN,cADE,EAERO,GAFQ,CAEJC,GAAG,IAAIC,QAAQ,CAACD,GAAD,EAAM,EAAN,CAFX,CAAb;AAGAJ,MAAAA,UAAU,GAAGC,KAAK,CAAC,CAAD,CAAL,IAAYA,KAAK,CAAC,CAAD,CAAL,CAASC,KAAT,CAAeL,cAAf,CAAzB,CAP0B,CAS1B;;AACAE,MAAAA,UAAU,CAAC,CAAD,CAAV,GAAgBA,UAAU,CAAC,CAAD,CAAV,GAAgB,CAAhC;AAEA,UAAIO,IAAI,GAAGP,UAAX;;AAEA,UAAIC,UAAU,IAAIA,UAAU,CAACO,MAA7B,EAAqC;AACjC,YAAIP,UAAU,CAACO,MAAX,KAAsB,CAA1B,EAA6B;AACzBP,UAAAA,UAAU,CAAC,CAAD,CAAV,GAAgB,OAAOA,UAAU,CAAC,CAAD,CAAjC;AACAA,UAAAA,UAAU,CAAC,CAAD,CAAV,GAAgBQ,UAAU,CAACR,UAAU,CAAC,CAAD,CAAX,CAAV,GAA4B,IAA5C;AACH;;AACDM,QAAAA,IAAI,GAAGA,IAAI,CAACG,MAAL,CAAYT,UAAZ,CAAP;AACH;;AAED,aAAO,IAAIF,IAAJ,CAAS,GAAGQ,IAAZ,CAAP;AACH;AACJ,GA7BU;;AA+BXI,EAAAA,SAAS,CAACf,IAAD,EAAOgB,SAAS,GAAG,KAAnB,EAA0B;AAC/B,QAAI,EAAEhB,IAAI,YAAYG,IAAlB,CAAJ,EAA6B;AACzB,YAAM,IAAIc,SAAJ,CAAc,uBAAd,CAAN;AACH;;AACD,UAAMN,IAAI,GAAG,KAAKO,eAAL,CAAqBlB,IAArB,EAA2BQ,GAA3B,CAA+B,CAACC,GAAD,EAAMU,CAAN,KAAY;AACpD,UAAIA,CAAC,KAAK,CAAV,EAAa;AACT;AACAV,QAAAA,GAAG,GAAGA,GAAG,GAAG,CAAZ;AACH;;AAED,UAAIU,CAAC,KAAK,CAAV,EAAa;AACT,eAAOC,QAAQ,CAACX,GAAG,GAAG,EAAP,EAAW,CAAX,EAAc,GAAd,CAAf;AACH;;AAED,aAAOW,QAAQ,CAACX,GAAG,GAAG,EAAP,EAAW,CAAX,EAAc,GAAd,CAAf;AACH,KAXY,CAAb;AAYA,UAAMY,WAAW,GAAI,GAAEV,IAAI,CAAC,CAAD,CAAI,IAAGA,IAAI,CAAC,CAAD,CAAI,IAAGA,IAAI,CAAC,CAAD,CAAI,EAArD;AACA,UAAMW,WAAW,GAAI,GAAEX,IAAI,CAAC,CAAD,CAAI,IAAGA,IAAI,CAAC,CAAD,CAAI,IAAGA,IAAI,CAAC,CAAD,CAAI,IAAGA,IAAI,CAAC,CAAD,CAAI,EAAhE;AAEA,WAAOU,WAAW,IAAIL,SAAS,GAAG,MAAMM,WAAT,GAAuB,EAApC,CAAlB;AACH,GAnDU;;AAqDXC,EAAAA,MAAM,CAACvB,IAAD,EAAOwB,aAAa,GAAG,yBAAvB,EAAkDC,IAAI,GAAG,IAAzD,EAA+D;AACjE,UAAMC,MAAM,GAAG,KAAKR,eAAL,CAAqBlB,IAArB,EAA2BQ,GAA3B,CAA+BmB,CAAC,IAAIP,QAAQ,CAACO,CAAD,EAAI,CAAJ,EAAO,CAAP,CAA5C,CAAf;AACA,UAAMC,UAAU,GAAG;AACfC,MAAAA,IAAI,EAAEH,MAAM,CAAC,CAAD,CADG;AAEfI,MAAAA,EAAE,EAAEV,QAAQ,CAAC,CAACM,MAAM,CAAC,CAAD,CAAP,GAAa,CAAd,EAAiB,CAAjB,EAAoB,CAApB,CAFG;AAGfK,MAAAA,EAAE,EAAEL,MAAM,CAAC,CAAD,CAHK;AAIfM,MAAAA,EAAE,EAAEN,MAAM,CAAC,CAAD,CAJK;AAKfO,MAAAA,EAAE,EAAEP,MAAM,CAAC,CAAD,CALK;AAMfQ,MAAAA,EAAE,EAAER,MAAM,CAAC,CAAD,CANK;AAOfS,MAAAA,GAAG,EAACT,MAAM,CAAC,CAAD,CAPK;AAQfU,MAAAA,CAAC,EAAEV,MAAM,CAAC,CAAD,CARM;AASfW,MAAAA,IAAI,EAAEzC,WAAW,CAAC6B,IAAD,CAAX,CAAkB,CAACC,MAAM,CAAC,CAAD,CAAzB,CATS;AAUfY,MAAAA,GAAG,EAAE1C,WAAW,CAAC6B,IAAD,CAAX,CAAkB,CAACC,MAAM,CAAC,CAAD,CAAzB;AAVU,KAAnB;AAaA,QAAIa,GAAG,GAAGf,aAAV;AACA,UAAMgB,gBAAgB,GAAG,EAAzB;AAEAC,IAAAA,MAAM,CAACC,IAAP,CAAYd,UAAZ,EACKe,IADL,CACU,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACjC,MAAF,GAAWgC,CAAC,CAAChC,MADjC,EACyC;AADzC,KAEKkC,OAFL,CAEaC,GAAG,IAAI;AACZ,UAAIR,GAAG,CAACS,QAAJ,CAAaD,GAAb,CAAJ,EAAuB;AACnBR,QAAAA,GAAG,GAAGA,GAAG,CAACU,OAAJ,CAAYF,GAAZ,EAAkB,IAAGP,gBAAgB,CAAC5B,MAAO,EAA7C,CAAN;AACA4B,QAAAA,gBAAgB,CAACU,IAAjB,CAAsBtB,UAAU,CAACmB,GAAD,CAAhC;AACH;AACJ,KAPL;AASAP,IAAAA,gBAAgB,CAACM,OAAjB,CAAyB,CAACK,KAAD,EAAQhC,CAAR,KAAc;AACnCoB,MAAAA,GAAG,GAAGA,GAAG,CAACU,OAAJ,CAAa,IAAG9B,CAAE,EAAlB,EAAqBgC,KAArB,CAAN;AACH,KAFD;AAIA,WAAOZ,GAAP;AACH,GArFU;;AAuFXa,EAAAA,IAAI,CAACC,MAAD,EAASC,MAAT,EAAiBC,KAAK,GAAGhE,GAAzB,EAA8B;AAC9B,QAAIiE,YAAJ,EAAkBC,OAAlB,EAA2BC,KAA3B,EAAkCC,OAAlC,EAA2CC,IAA3C,EAAiDC,MAAjD,EAAyDC,KAAzD;AAEAN,IAAAA,YAAY,GAAGH,MAAM,GAAGC,MAAxB;AACAG,IAAAA,OAAO,GAAGD,YAAY,GAAG,IAAzB;AACAG,IAAAA,OAAO,GAAGF,OAAO,GAAG,EAApB;AACAC,IAAAA,KAAK,GAAGC,OAAO,GAAG,EAAlB;AACAC,IAAAA,IAAI,GAAGF,KAAK,GAAG,EAAf;AACAG,IAAAA,MAAM,GAAGD,IAAI,GAAG,EAAhB;AACAE,IAAAA,KAAK,GAAGD,MAAM,GAAG,EAAjB;;AAEA,QAAI,CAACN,KAAK,CAACQ,QAAN,CAAe,GAAf,CAAL,EAA0B;AACtBR,MAAAA,KAAK,IAAI,GAAT;AACH;;AAED,WAAOS,IAAI,CAACC,KAAL,CACH;AACIT,MAAAA,YADJ;AAEIC,MAAAA,OAFJ;AAGIE,MAAAA,OAHJ;AAIID,MAAAA,KAJJ;AAKIE,MAAAA,IALJ;AAMIC,MAAAA,MANJ;AAOIC,MAAAA;AAPJ,MAQEP,KARF,CADG,CAAP;AAWH,GAjHU;;AAmHXW,EAAAA,KAAK,GAAG;AACJ,UAAMvD,IAAI,GAAG,KAAKO,eAAL,CAAqB,IAAIf,IAAJ,EAArB,EAAiCgE,KAAjC,CAAuC,CAAvC,EAA0C,CAA1C,CAAb;AACA,WAAO,IAAIhE,IAAJ,CAAS,GAAGQ,IAAZ,CAAP;AACH,GAtHU;;AAwHXyD,EAAAA,GAAG,GAAG;AACF,WAAO,IAAIjE,IAAJ,EAAP;AACH,GA1HU;;AA4HXkE,EAAAA,GAAG,CAACrE,IAAD,EAAOsE,GAAP,EAAYf,KAAZ,EAAmB;AAClBe,IAAAA,GAAG,GAAG5D,QAAQ,CAAC4D,GAAD,EAAM,EAAN,CAAd;AACA,UAAM3D,IAAI,GAAG,CACTX,IAAI,CAACuE,WAAL,MAAsBhB,KAAK,KAAKlE,IAAV,GAAiBiF,GAAjB,GAAuB,CAA7C,CADS,EAETtE,IAAI,CAACwE,QAAL,MAAmBjB,KAAK,KAAKjE,KAAV,GAAkBgF,GAAlB,GAAwB,CAA3C,CAFS,EAGTtE,IAAI,CAACyE,OAAL,MAAkBlB,KAAK,KAAKhE,GAAV,GAAgB+E,GAAhB,GAAsB,CAAxC,CAHS,EAITtE,IAAI,CAAC0E,QAAL,MAAmBnB,KAAK,KAAK/D,IAAV,GAAiB8E,GAAjB,GAAuB,CAA1C,CAJS,EAKTtE,IAAI,CAAC2E,UAAL,MAAqBpB,KAAK,KAAK9D,MAAV,GAAmB6E,GAAnB,GAAyB,CAA9C,CALS,EAMTtE,IAAI,CAAC4E,UAAL,MAAqBrB,KAAK,KAAK7D,MAAV,GAAmB4E,GAAnB,GAAyB,CAA9C,CANS,EAOTtE,IAAI,CAAC6E,eAAL,MAA0BtB,KAAK,KAAK5D,WAAV,GAAwB2E,GAAxB,GAA8B,CAAxD,CAPS,CAAb;AASA,WAAO,IAAInE,IAAJ,CAAS,GAAGQ,IAAZ,CAAP;AACH,GAxIU;;AA0IXmE,EAAAA,QAAQ,CAAC9E,IAAD,EAAOuD,KAAP,EAAc;AAClB,UAAMwB,MAAM,GAAG;AACX,OAAC1F,IAAD,GAAQ,CADG;AAEX,OAACC,KAAD,GAAS,CAFE;AAGX,OAACC,GAAD,GAAO,CAHI;AAIX,OAACC,IAAD,GAAQ,CAJG;AAKX,OAACC,MAAD,GAAU,CALC;AAMX,OAACC,MAAD,GAAU,CANC;AAOX,OAACC,WAAD,GAAe;AAPJ,KAAf;;AAUA,aAASqF,YAAT,CAAsBC,MAAtB,EAA8B;AAC1B,YAAMC,SAAS,GAAGH,MAAM,CAACxB,KAAD,CAAxB;AACA,aAAOwB,MAAM,CAACE,MAAD,CAAN,IAAkBC,SAAzB;AACH;;AAED,UAAMvE,IAAI,GAAG,CACTX,IAAI,CAACuE,WAAL,EADS,EAETS,YAAY,CAAC3F,IAAD,CAAZ,GAAqB,CAArB,GAAyBW,IAAI,CAACwE,QAAL,EAFhB,EAGTQ,YAAY,CAAC1F,KAAD,CAAZ,GAAsB,CAAtB,GAA0BU,IAAI,CAACyE,OAAL,EAHjB,EAITO,YAAY,CAACzF,GAAD,CAAZ,GAAoB,CAApB,GAAwBS,IAAI,CAAC0E,QAAL,EAJf,EAKTM,YAAY,CAACxF,IAAD,CAAZ,GAAqB,CAArB,GAAyBQ,IAAI,CAAC2E,UAAL,EALhB,EAMTK,YAAY,CAACvF,MAAD,CAAZ,GAAuB,CAAvB,GAA2BO,IAAI,CAAC4E,UAAL,EANlB,EAOTI,YAAY,CAACtF,MAAD,CAAZ,GAAuB,CAAvB,GAA2BM,IAAI,CAAC6E,eAAL,EAPlB,CAAb;AAUA,WAAO,IAAI1E,IAAJ,CAAS,GAAGQ,IAAZ,CAAP;AACH,GArKU;;AAuKXwE,EAAAA,KAAK,CAACnF,IAAD,EAAO;AACR,WAAO,IAAIG,IAAJ,CAAS,GAAG,KAAKe,eAAL,CAAqBlB,IAArB,CAAZ,CAAP;AACH,GAzKU;;AA2KXkB,EAAAA,eAAe,CAAClB,IAAD,EAAO;AAClB,WAAO,CACHA,IAAI,CAACuE,WAAL,EADG,EAEHvE,IAAI,CAACwE,QAAL,EAFG,EAGHxE,IAAI,CAACyE,OAAL,EAHG,EAIHzE,IAAI,CAAC0E,QAAL,EAJG,EAKH1E,IAAI,CAAC2E,UAAL,EALG,EAMH3E,IAAI,CAAC4E,UAAL,EANG,EAOH5E,IAAI,CAAC6E,eAAL,EAPG,CAAP;AASH,GArLU;;AAuLXO,EAAAA,iBAAiB,CAACpF,IAAD,EAAO;AACpB,UAAMqF,UAAU,GAAG,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,CAAnB;AAEA,UAAMC,KAAK,GAAGtF,IAAI,CAACwE,QAAL,EAAd;;AAEA,QAAIc,KAAK,KAAK,CAAd,EAAiB;AACb,aAAOD,UAAU,CAACC,KAAD,CAAjB;AACH,KAPmB,CASpB;;;AACA,UAAMC,IAAI,GAAGvF,IAAI,CAACuE,WAAL,EAAb;;AACA,QAAKgB,IAAI,GAAG,CAAP,KAAa,CAAb,IAAkBA,IAAI,GAAG,GAAP,KAAe,CAAlC,IAAwCA,IAAI,GAAG,GAAP,KAAe,CAA3D,EAA8D;AAC1D,aAAO,EAAP;AACH;;AACD,WAAO,EAAP;AACH;;AAtMU,CAAf,C,CAyMA;;AACA,SAASnE,QAAT,CAAkBmB,GAAlB,EAAuBiD,YAAvB,EAAqCC,SAArC,EAAgD;AAC5ClD,EAAAA,GAAG,GAAGA,GAAG,GAAG,EAAZ;AACAiD,EAAAA,YAAY,GAAGA,YAAY,IAAI,CAA/B;AACAC,EAAAA,SAAS,GAAGC,MAAM,CAAC,OAAOD,SAAP,KAAqB,WAArB,GAAmCA,SAAnC,GAA+C,GAAhD,CAAlB;;AACA,MAAIlD,GAAG,CAAC3B,MAAJ,GAAa4E,YAAjB,EAA+B;AAC3B,WAAOE,MAAM,CAACnD,GAAD,CAAb;AACH,GAFD,MAEO;AACHiD,IAAAA,YAAY,GAAGA,YAAY,GAAGjD,GAAG,CAAC3B,MAAlC;;AACA,QAAI4E,YAAY,GAAGC,SAAS,CAAC7E,MAA7B,EAAqC;AACjC6E,MAAAA,SAAS,IAAIA,SAAS,CAACE,MAAV,CAAiBH,YAAY,GAAGC,SAAS,CAAC7E,MAA1C,CAAb;AACH;;AACD,WAAO6E,SAAS,CAACtB,KAAV,CAAgB,CAAhB,EAAmBqB,YAAnB,IAAmCE,MAAM,CAACnD,GAAD,CAAhD;AACH;AACJ","sourcesContent":["const YEAR = 'year';\r\nconst MONTH = 'month';\r\nconst DAY = 'day';\r\nconst HOUR = 'hour';\r\nconst MINUTE = 'minute';\r\nconst SECOND = 'second';\r\nconst MILLISECOND = 'millisecond';\r\n\r\nconst month_names = {\r\n    en: [\r\n        'January',\r\n        'February',\r\n        'March',\r\n        'April',\r\n        'May',\r\n        'June',\r\n        'July',\r\n        'August',\r\n        'September',\r\n        'October',\r\n        'November',\r\n        'December'\r\n    ],\r\n    ru: [\r\n        'Январь',\r\n        'Февраль',\r\n        'Март',\r\n        'Апрель',\r\n        'Май',\r\n        'Июнь',\r\n        'Июль',\r\n        'Август',\r\n        'Сентябрь',\r\n        'Октябрь',\r\n        'Ноябрь',\r\n        'Декабрь'\r\n    ]\r\n};\r\n\r\nexport default {\r\n    parse(date, date_separator = '-', time_separator = /[.:]/) {\r\n        if (date instanceof Date) {\r\n            return date;\r\n        }\r\n        if (typeof date === 'string') {\r\n            let date_parts, time_parts;\r\n            const parts = date.split(' ');\r\n\r\n            date_parts = parts[0]\r\n                .split(date_separator)\r\n                .map(val => parseInt(val, 10));\r\n            time_parts = parts[1] && parts[1].split(time_separator);\r\n\r\n            // month is 0 indexed\r\n            date_parts[1] = date_parts[1] - 1;\r\n\r\n            let vals = date_parts;\r\n\r\n            if (time_parts && time_parts.length) {\r\n                if (time_parts.length === 4) {\r\n                    time_parts[3] = '0.' + time_parts[3];\r\n                    time_parts[3] = parseFloat(time_parts[3]) * 1000;\r\n                }\r\n                vals = vals.concat(time_parts);\r\n            }\r\n\r\n            return new Date(...vals);\r\n        }\r\n    },\r\n\r\n    to_string(date, with_time = false) {\r\n        if (!(date instanceof Date)) {\r\n            throw new TypeError('Invalid argument type');\r\n        }\r\n        const vals = this.get_date_values(date).map((val, i) => {\r\n            if (i === 1) {\r\n                // add 1 for month\r\n                val = val + 1;\r\n            }\r\n\r\n            if (i === 6) {\r\n                return padStart(val + '', 3, '0');\r\n            }\r\n\r\n            return padStart(val + '', 2, '0');\r\n        });\r\n        const date_string = `${vals[0]}-${vals[1]}-${vals[2]}`;\r\n        const time_string = `${vals[3]}:${vals[4]}:${vals[5]}.${vals[6]}`;\r\n\r\n        return date_string + (with_time ? ' ' + time_string : '');\r\n    },\r\n\r\n    format(date, format_string = 'YYYY-MM-DD HH:mm:ss.SSS', lang = 'en') {\r\n        const values = this.get_date_values(date).map(d => padStart(d, 2, 0));\r\n        const format_map = {\r\n            YYYY: values[0],\r\n            MM: padStart(+values[1] + 1, 2, 0),\r\n            DD: values[2],\r\n            HH: values[3],\r\n            mm: values[4],\r\n            ss: values[5],\r\n            SSS:values[6],\r\n            D: values[2],\r\n            MMMM: month_names[lang][+values[1]],\r\n            MMM: month_names[lang][+values[1]]\r\n        };\r\n\r\n        let str = format_string;\r\n        const formatted_values = [];\r\n\r\n        Object.keys(format_map)\r\n            .sort((a, b) => b.length - a.length) // big string first\r\n            .forEach(key => {\r\n                if (str.includes(key)) {\r\n                    str = str.replace(key, `$${formatted_values.length}`);\r\n                    formatted_values.push(format_map[key]);\r\n                }\r\n            });\r\n\r\n        formatted_values.forEach((value, i) => {\r\n            str = str.replace(`$${i}`, value);\r\n        });\r\n\r\n        return str;\r\n    },\r\n\r\n    diff(date_a, date_b, scale = DAY) {\r\n        let milliseconds, seconds, hours, minutes, days, months, years;\r\n\r\n        milliseconds = date_a - date_b;\r\n        seconds = milliseconds / 1000;\r\n        minutes = seconds / 60;\r\n        hours = minutes / 60;\r\n        days = hours / 24;\r\n        months = days / 30;\r\n        years = months / 12;\r\n\r\n        if (!scale.endsWith('s')) {\r\n            scale += 's';\r\n        }\r\n\r\n        return Math.floor(\r\n            {\r\n                milliseconds,\r\n                seconds,\r\n                minutes,\r\n                hours,\r\n                days,\r\n                months,\r\n                years\r\n            }[scale]\r\n        );\r\n    },\r\n\r\n    today() {\r\n        const vals = this.get_date_values(new Date()).slice(0, 3);\r\n        return new Date(...vals);\r\n    },\r\n\r\n    now() {\r\n        return new Date();\r\n    },\r\n\r\n    add(date, qty, scale) {\r\n        qty = parseInt(qty, 10);\r\n        const vals = [\r\n            date.getFullYear() + (scale === YEAR ? qty : 0),\r\n            date.getMonth() + (scale === MONTH ? qty : 0),\r\n            date.getDate() + (scale === DAY ? qty : 0),\r\n            date.getHours() + (scale === HOUR ? qty : 0),\r\n            date.getMinutes() + (scale === MINUTE ? qty : 0),\r\n            date.getSeconds() + (scale === SECOND ? qty : 0),\r\n            date.getMilliseconds() + (scale === MILLISECOND ? qty : 0)\r\n        ];\r\n        return new Date(...vals);\r\n    },\r\n\r\n    start_of(date, scale) {\r\n        const scores = {\r\n            [YEAR]: 6,\r\n            [MONTH]: 5,\r\n            [DAY]: 4,\r\n            [HOUR]: 3,\r\n            [MINUTE]: 2,\r\n            [SECOND]: 1,\r\n            [MILLISECOND]: 0\r\n        };\r\n\r\n        function should_reset(_scale) {\r\n            const max_score = scores[scale];\r\n            return scores[_scale] <= max_score;\r\n        }\r\n\r\n        const vals = [\r\n            date.getFullYear(),\r\n            should_reset(YEAR) ? 0 : date.getMonth(),\r\n            should_reset(MONTH) ? 1 : date.getDate(),\r\n            should_reset(DAY) ? 0 : date.getHours(),\r\n            should_reset(HOUR) ? 0 : date.getMinutes(),\r\n            should_reset(MINUTE) ? 0 : date.getSeconds(),\r\n            should_reset(SECOND) ? 0 : date.getMilliseconds()\r\n        ];\r\n\r\n        return new Date(...vals);\r\n    },\r\n\r\n    clone(date) {\r\n        return new Date(...this.get_date_values(date));\r\n    },\r\n\r\n    get_date_values(date) {\r\n        return [\r\n            date.getFullYear(),\r\n            date.getMonth(),\r\n            date.getDate(),\r\n            date.getHours(),\r\n            date.getMinutes(),\r\n            date.getSeconds(),\r\n            date.getMilliseconds()\r\n        ];\r\n    },\r\n\r\n    get_days_in_month(date) {\r\n        const no_of_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\r\n\r\n        const month = date.getMonth();\r\n\r\n        if (month !== 1) {\r\n            return no_of_days[month];\r\n        }\r\n\r\n        // Feb\r\n        const year = date.getFullYear();\r\n        if ((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0) {\r\n            return 29;\r\n        }\r\n        return 28;\r\n    }\r\n};\r\n\r\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart\r\nfunction padStart(str, targetLength, padString) {\r\n    str = str + '';\r\n    targetLength = targetLength >> 0;\r\n    padString = String(typeof padString !== 'undefined' ? padString : ' ');\r\n    if (str.length > targetLength) {\r\n        return String(str);\r\n    } else {\r\n        targetLength = targetLength - str.length;\r\n        if (targetLength > padString.length) {\r\n            padString += padString.repeat(targetLength / padString.length);\r\n        }\r\n        return padString.slice(0, targetLength) + String(str);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}