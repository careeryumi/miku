{"ast":null,"code":"import { createSVG } from './svg_utils';\nexport default class Arrow {\n  constructor(gantt, from_task, to_task) {\n    this.gantt = gantt;\n    this.from_task = from_task;\n    this.to_task = to_task;\n    this.calculate_path();\n    this.draw();\n  }\n\n  calculate_path() {\n    let start_x = this.from_task.$bar.getX() + this.from_task.$bar.getWidth() / 2;\n\n    const condition = () => this.to_task.$bar.getX() < start_x + this.gantt.options.padding && start_x > this.from_task.$bar.getX() + this.gantt.options.padding;\n\n    while (condition()) {\n      start_x -= 10;\n    }\n\n    const start_y = this.gantt.options.header_height + this.gantt.options.bar_height + (this.gantt.options.padding + this.gantt.options.bar_height) * this.from_task.task._index + this.gantt.options.padding;\n    const end_x = this.to_task.$bar.getX() - this.gantt.options.padding / 2;\n    const end_y = this.gantt.options.header_height + this.gantt.options.bar_height / 2 + (this.gantt.options.padding + this.gantt.options.bar_height) * this.to_task.task._index + this.gantt.options.padding;\n    const from_is_below_to = this.from_task.task._index > this.to_task.task._index;\n    const curve = this.gantt.options.arrow_curve;\n    const clockwise = from_is_below_to ? 1 : 0;\n    const curve_y = from_is_below_to ? -curve : curve;\n    const offset = from_is_below_to ? end_y + this.gantt.options.arrow_curve : end_y - this.gantt.options.arrow_curve;\n    this.path = `\n            M ${start_x} ${start_y}\n            V ${offset}\n            a ${curve} ${curve} 0 0 ${clockwise} ${curve} ${curve_y}\n            L ${end_x} ${end_y}\n            m -5 -5\n            l 5 5\n            l -5 5`;\n\n    if (this.to_task.$bar.getX() < this.from_task.$bar.getX() + this.gantt.options.padding) {\n      const down_1 = this.gantt.options.padding / 2 - curve;\n      const down_2 = this.to_task.$bar.getY() + this.to_task.$bar.getHeight() / 2 - curve_y;\n      const left = this.to_task.$bar.getX() - this.gantt.options.padding;\n      this.path = `\n                M ${start_x} ${start_y}\n                v ${down_1}\n                a ${curve} ${curve} 0 0 1 -${curve} ${curve}\n                H ${left}\n                a ${curve} ${curve} 0 0 ${clockwise} -${curve} ${curve_y}\n                V ${down_2}\n                a ${curve} ${curve} 0 0 ${clockwise} ${curve} ${curve_y}\n                L ${end_x} ${end_y}\n                m -5 -5\n                l 5 5\n                l -5 5`;\n    }\n  }\n\n  draw() {\n    this.element = createSVG('path', {\n      d: this.path,\n      'data-from': this.from_task.task.id,\n      'data-to': this.to_task.task.id\n    });\n  }\n\n  update() {\n    this.calculate_path();\n    this.element.setAttribute('d', this.path);\n  }\n\n}","map":{"version":3,"sources":["C:/Mikutech/mikutechWebProgrammingTest2/src/frappe-gantt/arrow.js"],"names":["createSVG","Arrow","constructor","gantt","from_task","to_task","calculate_path","draw","start_x","$bar","getX","getWidth","condition","options","padding","start_y","header_height","bar_height","task","_index","end_x","end_y","from_is_below_to","curve","arrow_curve","clockwise","curve_y","offset","path","down_1","down_2","getY","getHeight","left","element","d","id","update","setAttribute"],"mappings":"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","sourcesContent":["import { createSVG } from './svg_utils';\r\n\r\nexport default class Arrow {\r\n    constructor(gantt, from_task, to_task) {\r\n        this.gantt = gantt;\r\n        this.from_task = from_task;\r\n        this.to_task = to_task;\r\n\r\n        this.calculate_path();\r\n        this.draw();\r\n    }\r\n\r\n    calculate_path() {\r\n        let start_x =\r\n            this.from_task.$bar.getX() + this.from_task.$bar.getWidth() / 2;\r\n\r\n        const condition = () =>\r\n            this.to_task.$bar.getX() < start_x + this.gantt.options.padding &&\r\n            start_x > this.from_task.$bar.getX() + this.gantt.options.padding;\r\n\r\n        while (condition()) {\r\n            start_x -= 10;\r\n        }\r\n\r\n        const start_y =\r\n            this.gantt.options.header_height +\r\n            this.gantt.options.bar_height +\r\n            (this.gantt.options.padding + this.gantt.options.bar_height) *\r\n                this.from_task.task._index +\r\n            this.gantt.options.padding;\r\n\r\n        const end_x = this.to_task.$bar.getX() - this.gantt.options.padding / 2;\r\n        const end_y =\r\n            this.gantt.options.header_height +\r\n            this.gantt.options.bar_height / 2 +\r\n            (this.gantt.options.padding + this.gantt.options.bar_height) *\r\n                this.to_task.task._index +\r\n            this.gantt.options.padding;\r\n\r\n        const from_is_below_to =\r\n            this.from_task.task._index > this.to_task.task._index;\r\n        const curve = this.gantt.options.arrow_curve;\r\n        const clockwise = from_is_below_to ? 1 : 0;\r\n        const curve_y = from_is_below_to ? -curve : curve;\r\n        const offset = from_is_below_to\r\n            ? end_y + this.gantt.options.arrow_curve\r\n            : end_y - this.gantt.options.arrow_curve;\r\n\r\n        this.path = `\r\n            M ${start_x} ${start_y}\r\n            V ${offset}\r\n            a ${curve} ${curve} 0 0 ${clockwise} ${curve} ${curve_y}\r\n            L ${end_x} ${end_y}\r\n            m -5 -5\r\n            l 5 5\r\n            l -5 5`;\r\n\r\n        if (\r\n            this.to_task.$bar.getX() <\r\n            this.from_task.$bar.getX() + this.gantt.options.padding\r\n        ) {\r\n            const down_1 = this.gantt.options.padding / 2 - curve;\r\n            const down_2 =\r\n                this.to_task.$bar.getY() +\r\n                this.to_task.$bar.getHeight() / 2 -\r\n                curve_y;\r\n            const left = this.to_task.$bar.getX() - this.gantt.options.padding;\r\n\r\n            this.path = `\r\n                M ${start_x} ${start_y}\r\n                v ${down_1}\r\n                a ${curve} ${curve} 0 0 1 -${curve} ${curve}\r\n                H ${left}\r\n                a ${curve} ${curve} 0 0 ${clockwise} -${curve} ${curve_y}\r\n                V ${down_2}\r\n                a ${curve} ${curve} 0 0 ${clockwise} ${curve} ${curve_y}\r\n                L ${end_x} ${end_y}\r\n                m -5 -5\r\n                l 5 5\r\n                l -5 5`;\r\n        }\r\n    }\r\n\r\n    draw() {\r\n        this.element = createSVG('path', {\r\n            d: this.path,\r\n            'data-from': this.from_task.task.id,\r\n            'data-to': this.to_task.task.id\r\n        });\r\n    }\r\n\r\n    update() {\r\n        this.calculate_path();\r\n        this.element.setAttribute('d', this.path);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}