{"ast":null,"code":"import date_utils from './date_utils';\nimport { $, createSVG } from './svg_utils';\nimport Bar from './bar';\nimport Arrow from './arrow';\nimport Popup from './popup';\nimport './gantt.scss';\nexport default class Gantt {\n  constructor(wrapper, tasks, options) {\n    this.setup_wrapper(wrapper);\n    this.setup_options(options);\n    this.setup_tasks(tasks); // initialize with default view mode\n\n    this.change_view_mode();\n    this.bind_events();\n  }\n\n  setup_wrapper(element) {\n    let svg_element, wrapper_element; // CSS Selector is passed\n\n    if (typeof element === 'string') {\n      element = document.querySelector(element);\n    } // get the SVGElement\n\n\n    if (element instanceof HTMLElement) {\n      wrapper_element = element;\n      svg_element = element.querySelector('svg');\n    } else if (element instanceof SVGElement) {\n      svg_element = element;\n    } else {\n      throw new TypeError('FrappÃ© Gantt only supports usage of a string CSS selector,' + \" HTML DOM element or SVG DOM element for the 'element' parameter\");\n    } // svg element\n\n\n    if (!svg_element) {\n      // create it\n      this.$svg = createSVG('svg', {\n        append_to: wrapper_element,\n        class: 'gantt'\n      });\n    } else {\n      this.$svg = svg_element;\n      this.$svg.classList.add('gantt');\n    } // wrapper element\n\n\n    this.$container = document.createElement('div');\n    this.$container.classList.add('gantt-container');\n    const parent_element = this.$svg.parentElement;\n    parent_element.appendChild(this.$container);\n    this.$container.appendChild(this.$svg); // popup wrapper\n\n    this.popup_wrapper = document.createElement('div');\n    this.popup_wrapper.classList.add('popup-wrapper');\n    this.$container.appendChild(this.popup_wrapper);\n  }\n\n  setup_options(options) {\n    const default_options = {\n      header_height: 50,\n      column_width: 30,\n      step: 24,\n      view_modes: ['Quarter Day', 'Half Day', 'Day', 'Week', 'Month', 'Year'],\n      bar_height: 20,\n      bar_corner_radius: 3,\n      arrow_curve: 5,\n      padding: 18,\n      view_mode: 'Day',\n      date_format: 'YYYY-MM-DD',\n      popup_trigger: 'click',\n      custom_popup_html: null,\n      language: 'en'\n    };\n    this.options = Object.assign({}, default_options, options);\n  }\n\n  setup_tasks(tasks) {\n    // prepare tasks\n    this.tasks = tasks.map((task, i) => {\n      // convert to Date objects\n      task._start = date_utils.parse(task.start);\n      task._end = date_utils.parse(task.end); // make task invalid if duration too large\n\n      if (date_utils.diff(task._end, task._start, 'year') > 10) {\n        task.end = null;\n      } // cache index\n\n\n      task._index = i; // invalid dates\n\n      if (!task.start && !task.end) {\n        const today = date_utils.today();\n        task._start = today;\n        task._end = date_utils.add(today, 2, 'day');\n      }\n\n      if (!task.start && task.end) {\n        task._start = date_utils.add(task._end, -2, 'day');\n      }\n\n      if (task.start && !task.end) {\n        task._end = date_utils.add(task._start, 2, 'day');\n      } // if hours is not set, assume the last day is full day\n      // e.g: 2018-09-09 becomes 2018-09-09 23:59:59\n\n\n      const task_end_values = date_utils.get_date_values(task._end);\n\n      if (task_end_values.slice(3).every(d => d === 0)) {\n        task._end = date_utils.add(task._end, 24, 'hour');\n      } // invalid flag\n\n\n      if (!task.start || !task.end) {\n        task.invalid = true;\n      } // dependencies\n\n\n      if (typeof task.dependencies === 'string' || !task.dependencies) {\n        let deps = [];\n\n        if (task.dependencies) {\n          deps = task.dependencies.split(',').map(d => d.trim()).filter(d => d);\n        }\n\n        task.dependencies = deps;\n      } // uids\n\n\n      if (!task.id) {\n        task.id = generate_id(task);\n      }\n\n      return task;\n    });\n    this.setup_dependencies();\n  }\n\n  setup_dependencies() {\n    this.dependency_map = {};\n\n    for (let t of this.tasks) {\n      for (let d of t.dependencies) {\n        this.dependency_map[d] = this.dependency_map[d] || [];\n        this.dependency_map[d].push(t.id);\n      }\n    }\n  }\n\n  refresh(tasks) {\n    this.setup_tasks(tasks);\n    this.change_view_mode();\n  }\n\n  change_view_mode(mode = this.options.view_mode) {\n    this.update_view_scale(mode);\n    this.setup_dates();\n    this.render(); // fire viewmode_change event\n\n    this.trigger_event('view_change', [mode]);\n  }\n\n  update_view_scale(view_mode) {\n    this.options.view_mode = view_mode;\n\n    if (view_mode === 'Day') {\n      this.options.step = 24;\n      this.options.column_width = 38;\n    } else if (view_mode === 'Half Day') {\n      this.options.step = 24 / 2;\n      this.options.column_width = 38;\n    } else if (view_mode === 'Quarter Day') {\n      this.options.step = 24 / 4;\n      this.options.column_width = 38;\n    } else if (view_mode === 'Week') {\n      this.options.step = 24 * 7;\n      this.options.column_width = 140;\n    } else if (view_mode === 'Month') {\n      this.options.step = 24 * 30;\n      this.options.column_width = 120;\n    } else if (view_mode === 'Year') {\n      this.options.step = 24 * 365;\n      this.options.column_width = 120;\n    }\n  }\n\n  setup_dates() {\n    this.setup_gantt_dates();\n    this.setup_date_values();\n  }\n\n  setup_gantt_dates() {\n    this.gantt_start = this.gantt_end = null;\n\n    for (let task of this.tasks) {\n      // set global start and end date\n      if (!this.gantt_start || task._start < this.gantt_start) {\n        this.gantt_start = task._start;\n      }\n\n      if (!this.gantt_end || task._end > this.gantt_end) {\n        this.gantt_end = task._end;\n      }\n    }\n\n    this.gantt_start = date_utils.start_of(this.gantt_start, 'day');\n    this.gantt_end = date_utils.start_of(this.gantt_end, 'day'); // add date padding on both sides\n\n    if (this.view_is(['Quarter Day', 'Half Day'])) {\n      this.gantt_start = date_utils.add(this.gantt_start, -7, 'day');\n      this.gantt_end = date_utils.add(this.gantt_end, 7, 'day');\n    } else if (this.view_is('Month')) {\n      this.gantt_start = date_utils.start_of(this.gantt_start, 'year');\n      this.gantt_end = date_utils.add(this.gantt_end, 1, 'year');\n    } else if (this.view_is('Year')) {\n      this.gantt_start = date_utils.add(this.gantt_start, -2, 'year');\n      this.gantt_end = date_utils.add(this.gantt_end, 2, 'year');\n    } else {\n      this.gantt_start = date_utils.add(this.gantt_start, -1, 'month');\n      this.gantt_end = date_utils.add(this.gantt_end, 1, 'month');\n    }\n  }\n\n  setup_date_values() {\n    this.dates = [];\n    let cur_date = null;\n\n    while (cur_date === null || cur_date < this.gantt_end) {\n      if (!cur_date) {\n        cur_date = date_utils.clone(this.gantt_start);\n      } else {\n        if (this.view_is('Year')) {\n          cur_date = date_utils.add(cur_date, 1, 'year');\n        } else if (this.view_is('Month')) {\n          cur_date = date_utils.add(cur_date, 1, 'month');\n        } else {\n          cur_date = date_utils.add(cur_date, this.options.step, 'hour');\n        }\n      }\n\n      this.dates.push(cur_date);\n    }\n  }\n\n  bind_events() {\n    this.bind_grid_click();\n    this.bind_bar_events();\n  }\n\n  render() {\n    this.clear();\n    this.setup_layers();\n    this.make_grid();\n    this.make_dates();\n    this.make_bars();\n    this.make_arrows();\n    this.map_arrows_on_bars();\n    this.set_width();\n    this.set_scroll_position();\n  }\n\n  setup_layers() {\n    this.layers = {};\n    const layers = ['grid', 'date', 'arrow', 'progress', 'bar', 'details']; // make group layers\n\n    for (let layer of layers) {\n      this.layers[layer] = createSVG('g', {\n        class: layer,\n        append_to: this.$svg\n      });\n    }\n  }\n\n  make_grid() {\n    this.make_grid_background();\n    this.make_grid_rows();\n    this.make_grid_header();\n    this.make_grid_ticks();\n    this.make_grid_highlights();\n  }\n\n  make_grid_background() {\n    const grid_width = this.dates.length * this.options.column_width;\n    const grid_height = this.options.header_height + this.options.padding + (this.options.bar_height + this.options.padding) * this.tasks.length;\n    createSVG('rect', {\n      x: 0,\n      y: 0,\n      width: grid_width,\n      height: grid_height,\n      class: 'grid-background',\n      append_to: this.layers.grid\n    });\n    $.attr(this.$svg, {\n      height: grid_height + this.options.padding + 100,\n      width: '100%'\n    });\n  }\n\n  make_grid_rows() {\n    const rows_layer = createSVG('g', {\n      append_to: this.layers.grid\n    });\n    const lines_layer = createSVG('g', {\n      append_to: this.layers.grid\n    });\n    const row_width = this.dates.length * this.options.column_width;\n    const row_height = this.options.bar_height + this.options.padding;\n    let row_y = this.options.header_height + this.options.padding / 2;\n\n    for (let i = 0; i < this.tasks.length; i++) {\n      createSVG('rect', {\n        x: 0,\n        y: row_y,\n        width: row_width,\n        height: row_height,\n        class: 'grid-row',\n        append_to: rows_layer\n      });\n      createSVG('line', {\n        x1: 0,\n        y1: row_y + row_height,\n        x2: row_width,\n        y2: row_y + row_height,\n        class: 'row-line',\n        append_to: lines_layer\n      });\n      row_y += this.options.bar_height + this.options.padding;\n    }\n  }\n\n  make_grid_header() {\n    const header_width = this.dates.length * this.options.column_width;\n    const header_height = this.options.header_height + 10;\n    createSVG('rect', {\n      x: 0,\n      y: 0,\n      width: header_width,\n      height: header_height,\n      class: 'grid-header',\n      append_to: this.layers.grid\n    });\n  }\n\n  make_grid_ticks() {\n    let tick_x = 0;\n    let tick_y = this.options.header_height + this.options.padding / 2;\n    let tick_height = (this.options.bar_height + this.options.padding) * this.tasks.length;\n\n    for (let date of this.dates) {\n      let tick_class = 'tick'; // thick tick for monday\n\n      if (this.view_is('Day') && date.getDate() === 1) {\n        tick_class += ' thick';\n      } // thick tick for first week\n\n\n      if (this.view_is('Week') && date.getDate() >= 1 && date.getDate() < 8) {\n        tick_class += ' thick';\n      } // thick ticks for quarters\n\n\n      if (this.view_is('Month') && (date.getMonth() + 1) % 3 === 0) {\n        tick_class += ' thick';\n      }\n\n      createSVG('path', {\n        d: `M ${tick_x} ${tick_y} v ${tick_height}`,\n        class: tick_class,\n        append_to: this.layers.grid\n      });\n\n      if (this.view_is('Month')) {\n        tick_x += date_utils.get_days_in_month(date) * this.options.column_width / 30;\n      } else {\n        tick_x += this.options.column_width;\n      }\n    }\n  }\n\n  make_grid_highlights() {\n    // highlight today's date\n    if (this.view_is('Day')) {\n      const x = date_utils.diff(date_utils.today(), this.gantt_start, 'hour') / this.options.step * this.options.column_width;\n      const y = 0;\n      const width = this.options.column_width;\n      const height = (this.options.bar_height + this.options.padding) * this.tasks.length + this.options.header_height + this.options.padding / 2;\n      createSVG('rect', {\n        x,\n        y,\n        width,\n        height,\n        class: 'today-highlight',\n        append_to: this.layers.grid\n      });\n    }\n  }\n\n  make_dates() {\n    for (let date of this.get_dates_to_draw()) {\n      createSVG('text', {\n        x: date.lower_x,\n        y: date.lower_y,\n        innerHTML: date.lower_text,\n        class: 'lower-text',\n        append_to: this.layers.date\n      });\n\n      if (date.upper_text) {\n        const $upper_text = createSVG('text', {\n          x: date.upper_x,\n          y: date.upper_y,\n          innerHTML: date.upper_text,\n          class: 'upper-text',\n          append_to: this.layers.date\n        }); // remove out-of-bound dates\n\n        if ($upper_text.getBBox().x2 > this.layers.grid.getBBox().width) {\n          $upper_text.remove();\n        }\n      }\n    }\n  }\n\n  get_dates_to_draw() {\n    let last_date = null;\n    const dates = this.dates.map((date, i) => {\n      const d = this.get_date_info(date, last_date, i);\n      last_date = date;\n      return d;\n    });\n    return dates;\n  }\n\n  get_date_info(date, last_date, i) {\n    if (!last_date) {\n      last_date = date_utils.add(date, 1, 'year');\n    }\n\n    const date_text = {\n      'Quarter Day_lower': date_utils.format(date, 'HH', this.options.language),\n      'Half Day_lower': date_utils.format(date, 'HH', this.options.language),\n      Day_lower: date.getDate() !== last_date.getDate() ? date_utils.format(date, 'D', this.options.language) : '',\n      Week_lower: date.getMonth() !== last_date.getMonth() ? date_utils.format(date, 'D MMM', this.options.language) : date_utils.format(date, 'D', this.options.language),\n      Month_lower: date_utils.format(date, 'MMMM', this.options.language),\n      Year_lower: date_utils.format(date, 'YYYY', this.options.language),\n      'Quarter Day_upper': date.getDate() !== last_date.getDate() ? date_utils.format(date, 'D MMM', this.options.language) : '',\n      'Half Day_upper': date.getDate() !== last_date.getDate() ? date.getMonth() !== last_date.getMonth() ? date_utils.format(date, 'D MMM', this.options.language) : date_utils.format(date, 'D', this.options.language) : '',\n      Day_upper: date.getMonth() !== last_date.getMonth() ? date_utils.format(date, 'MMMM', this.options.language) : '',\n      Week_upper: date.getMonth() !== last_date.getMonth() ? date_utils.format(date, 'MMMM', this.options.language) : '',\n      Month_upper: date.getFullYear() !== last_date.getFullYear() ? date_utils.format(date, 'YYYY', this.options.language) : '',\n      Year_upper: date.getFullYear() !== last_date.getFullYear() ? date_utils.format(date, 'YYYY', this.options.language) : ''\n    };\n    const base_pos = {\n      x: i * this.options.column_width,\n      lower_y: this.options.header_height,\n      upper_y: this.options.header_height - 25\n    };\n    const x_pos = {\n      'Quarter Day_lower': this.options.column_width * 4 / 2,\n      'Quarter Day_upper': 0,\n      'Half Day_lower': this.options.column_width * 2 / 2,\n      'Half Day_upper': 0,\n      Day_lower: this.options.column_width / 2,\n      Day_upper: this.options.column_width * 30 / 2,\n      Week_lower: 0,\n      Week_upper: this.options.column_width * 4 / 2,\n      Month_lower: this.options.column_width / 2,\n      Month_upper: this.options.column_width * 12 / 2,\n      Year_lower: this.options.column_width / 2,\n      Year_upper: this.options.column_width * 30 / 2\n    };\n    return {\n      upper_text: date_text[`${this.options.view_mode}_upper`],\n      lower_text: date_text[`${this.options.view_mode}_lower`],\n      upper_x: base_pos.x + x_pos[`${this.options.view_mode}_upper`],\n      upper_y: base_pos.upper_y,\n      lower_x: base_pos.x + x_pos[`${this.options.view_mode}_lower`],\n      lower_y: base_pos.lower_y\n    };\n  }\n\n  make_bars() {\n    this.bars = this.tasks.map(task => {\n      const bar = new Bar(this, task);\n      this.layers.bar.appendChild(bar.group);\n      return bar;\n    });\n  }\n\n  make_arrows() {\n    this.arrows = [];\n\n    for (let task of this.tasks) {\n      let arrows = [];\n      arrows = task.dependencies.map(task_id => {\n        const dependency = this.get_task(task_id);\n        if (!dependency) return null;\n        const arrow = new Arrow(this, this.bars[dependency._index], // from_task\n        this.bars[task._index] // to_task\n        );\n        this.layers.arrow.appendChild(arrow.element);\n        return arrow;\n      }).filter(Boolean); // filter falsy values\n\n      this.arrows = this.arrows.concat(arrows);\n    }\n  }\n\n  map_arrows_on_bars() {\n    for (let bar of this.bars) {\n      bar.arrows = this.arrows.filter(arrow => {\n        return arrow.from_task.task.id === bar.task.id || arrow.to_task.task.id === bar.task.id;\n      });\n    }\n  }\n\n  set_width() {\n    const cur_width = this.$svg.getBoundingClientRect().width;\n    const actual_width = this.$svg.querySelector('.grid .grid-row').getAttribute('width');\n\n    if (cur_width < actual_width) {\n      this.$svg.setAttribute('width', actual_width);\n    }\n  }\n\n  set_scroll_position() {\n    const parent_element = this.$svg.parentElement;\n    if (!parent_element) return;\n    const hours_before_first_task = date_utils.diff(this.get_oldest_starting_date(), this.gantt_start, 'hour');\n    const scroll_pos = hours_before_first_task / this.options.step * this.options.column_width - this.options.column_width;\n    parent_element.scrollLeft = scroll_pos;\n  }\n\n  bind_grid_click() {\n    $.on(this.$svg, this.options.popup_trigger, '.grid-row, .grid-header', () => {\n      this.unselect_all();\n      this.hide_popup();\n    });\n  }\n\n  bind_bar_events() {\n    let is_dragging = false;\n    let x_on_start = 0;\n    let is_resizing_left = false;\n    let is_resizing_right = false;\n    let parent_bar_id = null;\n    let bars = []; // instanceof Bar\n\n    this.bar_being_dragged = null;\n\n    function action_in_progress() {\n      return is_dragging || is_resizing_left || is_resizing_right;\n    }\n\n    $.on(this.$svg, 'mousedown', '.bar-wrapper, .handle', (e, element) => {\n      const bar_wrapper = $.closest('.bar-wrapper', element);\n\n      if (element.classList.contains('left')) {\n        is_resizing_left = true;\n      } else if (element.classList.contains('right')) {\n        is_resizing_right = true;\n      } else if (element.classList.contains('bar-wrapper')) {\n        is_dragging = true;\n      }\n\n      bar_wrapper.classList.add('active');\n      x_on_start = e.offsetX;\n      parent_bar_id = bar_wrapper.getAttribute('data-id');\n      const ids = [parent_bar_id, ...this.get_all_dependent_tasks(parent_bar_id)];\n      bars = ids.map(id => this.get_bar(id));\n      this.bar_being_dragged = parent_bar_id;\n      bars.forEach(bar => {\n        const $bar = bar.$bar;\n        $bar.ox = $bar.getX();\n        $bar.oy = $bar.getY();\n        $bar.owidth = $bar.getWidth();\n        $bar.finaldx = 0;\n      });\n    });\n    $.on(this.$svg, 'mousemove', e => {\n      if (!action_in_progress()) return;\n      const dx = e.offsetX - x_on_start;\n      bars.forEach(bar => {\n        const $bar = bar.$bar;\n        $bar.finaldx = this.get_snap_position(dx);\n\n        if (is_resizing_left) {\n          if (parent_bar_id === bar.task.id) {\n            bar.update_bar_position({\n              x: $bar.ox + $bar.finaldx,\n              width: $bar.owidth - $bar.finaldx\n            });\n          } else {\n            bar.update_bar_position({\n              x: $bar.ox + $bar.finaldx\n            });\n          }\n        } else if (is_resizing_right) {\n          if (parent_bar_id === bar.task.id) {\n            bar.update_bar_position({\n              width: $bar.owidth + $bar.finaldx\n            });\n          }\n        } else if (is_dragging) {\n          bar.update_bar_position({\n            x: $bar.ox + $bar.finaldx\n          });\n        }\n      });\n    });\n    document.addEventListener('mouseup', e => {\n      if (is_dragging || is_resizing_left || is_resizing_right) {\n        bars.forEach(bar => bar.group.classList.remove('active'));\n      }\n\n      is_dragging = false;\n      is_resizing_left = false;\n      is_resizing_right = false;\n    });\n    $.on(this.$svg, 'mouseup', e => {\n      this.bar_being_dragged = null;\n      bars.forEach(bar => {\n        const $bar = bar.$bar;\n        if (!$bar.finaldx) return;\n        bar.date_changed();\n        bar.set_action_completed();\n      });\n    });\n    this.bind_bar_progress();\n  }\n\n  bind_bar_progress() {\n    let x_on_start = 0;\n    let is_resizing = null;\n    let bar = null;\n    let $bar_progress = null;\n    let $bar = null;\n    $.on(this.$svg, 'mousedown', '.handle.progress', (e, handle) => {\n      is_resizing = true;\n      x_on_start = e.offsetX;\n      const $bar_wrapper = $.closest('.bar-wrapper', handle);\n      const id = $bar_wrapper.getAttribute('data-id');\n      bar = this.get_bar(id);\n      $bar_progress = bar.$bar_progress;\n      $bar = bar.$bar;\n      $bar_progress.finaldx = 0;\n      $bar_progress.owidth = $bar_progress.getWidth();\n      $bar_progress.min_dx = -$bar_progress.getWidth();\n      $bar_progress.max_dx = $bar.getWidth() - $bar_progress.getWidth();\n    });\n    $.on(this.$svg, 'mousemove', e => {\n      if (!is_resizing) return;\n      let dx = e.offsetX - x_on_start;\n\n      if (dx > $bar_progress.max_dx) {\n        dx = $bar_progress.max_dx;\n      }\n\n      if (dx < $bar_progress.min_dx) {\n        dx = $bar_progress.min_dx;\n      }\n\n      const $handle = bar.$handle_progress;\n      $.attr($bar_progress, 'width', $bar_progress.owidth + dx);\n      $.attr($handle, 'points', bar.get_progress_polygon_points());\n      $bar_progress.finaldx = dx;\n    });\n    $.on(this.$svg, 'mouseup', () => {\n      is_resizing = false;\n      if (!($bar_progress && $bar_progress.finaldx)) return;\n      bar.progress_changed();\n      bar.set_action_completed();\n    });\n  }\n\n  get_all_dependent_tasks(task_id) {\n    let out = [];\n    let to_process = [task_id];\n\n    let was_processed = d => !to_process.includes(d);\n\n    while (to_process.length) {\n      const deps = to_process.reduce((acc, curr) => {\n        acc = acc.concat(this.dependency_map[curr]);\n        return acc;\n      }, []);\n      out = out.concat(deps);\n      to_process = deps.filter(was_processed);\n    }\n\n    return out.filter(Boolean);\n  }\n\n  get_snap_position(dx) {\n    let odx = dx,\n        rem,\n        position;\n\n    if (this.view_is('Week')) {\n      rem = dx % (this.options.column_width / 7);\n      position = odx - rem + (rem < this.options.column_width / 14 ? 0 : this.options.column_width / 7);\n    } else if (this.view_is('Month')) {\n      rem = dx % (this.options.column_width / 30);\n      position = odx - rem + (rem < this.options.column_width / 60 ? 0 : this.options.column_width / 30);\n    } else {\n      rem = dx % this.options.column_width;\n      position = odx - rem + (rem < this.options.column_width / 2 ? 0 : this.options.column_width);\n    }\n\n    return position;\n  }\n\n  unselect_all() {\n    [...this.$svg.querySelectorAll('.bar-wrapper')].forEach(el => {\n      el.classList.remove('active');\n    });\n  }\n\n  view_is(modes) {\n    if (typeof modes === 'string') {\n      return this.options.view_mode === modes;\n    }\n\n    if (Array.isArray(modes)) {\n      return modes.some(mode => this.options.view_mode === mode);\n    }\n\n    return false;\n  }\n\n  get_task(id) {\n    return this.tasks.find(task => {\n      return task.id === id;\n    });\n  }\n\n  get_bar(id) {\n    return this.bars.find(bar => {\n      return bar.task.id === id;\n    });\n  }\n\n  show_popup(options) {\n    if (!this.popup) {\n      this.popup = new Popup(this.popup_wrapper, this.options.custom_popup_html);\n    }\n\n    this.popup.show(options);\n  }\n\n  hide_popup() {\n    this.popup && this.popup.hide();\n  }\n\n  trigger_event(event, args) {\n    if (this.options['on_' + event]) {\n      this.options['on_' + event].apply(null, args);\n    }\n  }\n  /**\r\n   * Gets the oldest starting date from the list of tasks\r\n   *\r\n   * @returns Date\r\n   * @memberof Gantt\r\n   */\n\n\n  get_oldest_starting_date() {\n    return this.tasks.map(task => task._start).reduce((prev_date, cur_date) => cur_date <= prev_date ? cur_date : prev_date);\n  }\n  /**\r\n   * Clear all elements from the parent svg element\r\n   *\r\n   * @memberof Gantt\r\n   */\n\n\n  clear() {\n    this.$svg.innerHTML = '';\n  }\n\n}\n\nfunction generate_id(task) {\n  return task.name + '_' + Math.random().toString(36).slice(2, 12);\n}","map":{"version":3,"sources":["C:/Mikutech/mikutechWebProgrammingTest2/src/frappe-gantt/index.js"],"names":["date_utils","$","createSVG","Bar","Arrow","Popup","Gantt","constructor","wrapper","tasks","options","setup_wrapper","setup_options","setup_tasks","change_view_mode","bind_events","element","svg_element","wrapper_element","document","querySelector","HTMLElement","SVGElement","TypeError","$svg","append_to","class","classList","add","$container","createElement","parent_element","parentElement","appendChild","popup_wrapper","default_options","header_height","column_width","step","view_modes","bar_height","bar_corner_radius","arrow_curve","padding","view_mode","date_format","popup_trigger","custom_popup_html","language","Object","assign","map","task","i","_start","parse","start","_end","end","diff","_index","today","task_end_values","get_date_values","slice","every","d","invalid","dependencies","deps","split","trim","filter","id","generate_id","setup_dependencies","dependency_map","t","push","refresh","mode","update_view_scale","setup_dates","render","trigger_event","setup_gantt_dates","setup_date_values","gantt_start","gantt_end","start_of","view_is","dates","cur_date","clone","bind_grid_click","bind_bar_events","clear","setup_layers","make_grid","make_dates","make_bars","make_arrows","map_arrows_on_bars","set_width","set_scroll_position","layers","layer","make_grid_background","make_grid_rows","make_grid_header","make_grid_ticks","make_grid_highlights","grid_width","length","grid_height","x","y","width","height","grid","attr","rows_layer","lines_layer","row_width","row_height","row_y","x1","y1","x2","y2","header_width","tick_x","tick_y","tick_height","date","tick_class","getDate","getMonth","get_days_in_month","get_dates_to_draw","lower_x","lower_y","innerHTML","lower_text","upper_text","$upper_text","upper_x","upper_y","getBBox","remove","last_date","get_date_info","date_text","format","Day_lower","Week_lower","Month_lower","Year_lower","Day_upper","Week_upper","Month_upper","getFullYear","Year_upper","base_pos","x_pos","bars","bar","group","arrows","task_id","dependency","get_task","arrow","Boolean","concat","from_task","to_task","cur_width","getBoundingClientRect","actual_width","getAttribute","setAttribute","hours_before_first_task","get_oldest_starting_date","scroll_pos","scrollLeft","on","unselect_all","hide_popup","is_dragging","x_on_start","is_resizing_left","is_resizing_right","parent_bar_id","bar_being_dragged","action_in_progress","e","bar_wrapper","closest","contains","offsetX","ids","get_all_dependent_tasks","get_bar","forEach","$bar","ox","getX","oy","getY","owidth","getWidth","finaldx","dx","get_snap_position","update_bar_position","addEventListener","date_changed","set_action_completed","bind_bar_progress","is_resizing","$bar_progress","handle","$bar_wrapper","min_dx","max_dx","$handle","$handle_progress","get_progress_polygon_points","progress_changed","out","to_process","was_processed","includes","reduce","acc","curr","odx","rem","position","querySelectorAll","el","modes","Array","isArray","some","find","show_popup","popup","show","hide","event","args","apply","prev_date","name","Math","random","toString"],"mappings":"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","sourcesContent":["import date_utils from './date_utils';\r\nimport { $, createSVG } from './svg_utils';\r\nimport Bar from './bar';\r\nimport Arrow from './arrow';\r\nimport Popup from './popup';\r\n\r\nimport './gantt.scss';\r\n\r\nexport default class Gantt {\r\n    constructor(wrapper, tasks, options) {\r\n        this.setup_wrapper(wrapper);\r\n        this.setup_options(options);\r\n        this.setup_tasks(tasks);\r\n        // initialize with default view mode\r\n        this.change_view_mode();\r\n        this.bind_events();\r\n    }\r\n\r\n    setup_wrapper(element) {\r\n        let svg_element, wrapper_element;\r\n\r\n        // CSS Selector is passed\r\n        if (typeof element === 'string') {\r\n            element = document.querySelector(element);\r\n        }\r\n\r\n        // get the SVGElement\r\n        if (element instanceof HTMLElement) {\r\n            wrapper_element = element;\r\n            svg_element = element.querySelector('svg');\r\n        } else if (element instanceof SVGElement) {\r\n            svg_element = element;\r\n        } else {\r\n            throw new TypeError(\r\n                'FrappÃ© Gantt only supports usage of a string CSS selector,' +\r\n                    \" HTML DOM element or SVG DOM element for the 'element' parameter\"\r\n            );\r\n        }\r\n\r\n        // svg element\r\n        if (!svg_element) {\r\n            // create it\r\n            this.$svg = createSVG('svg', {\r\n                append_to: wrapper_element,\r\n                class: 'gantt'\r\n            });\r\n        } else {\r\n            this.$svg = svg_element;\r\n            this.$svg.classList.add('gantt');\r\n        }\r\n\r\n        // wrapper element\r\n        this.$container = document.createElement('div');\r\n        this.$container.classList.add('gantt-container');\r\n\r\n        const parent_element = this.$svg.parentElement;\r\n        parent_element.appendChild(this.$container);\r\n        this.$container.appendChild(this.$svg);\r\n\r\n        // popup wrapper\r\n        this.popup_wrapper = document.createElement('div');\r\n        this.popup_wrapper.classList.add('popup-wrapper');\r\n        this.$container.appendChild(this.popup_wrapper);\r\n    }\r\n\r\n    setup_options(options) {\r\n        const default_options = {\r\n            header_height: 50,\r\n            column_width: 30,\r\n            step: 24,\r\n            view_modes: [\r\n                'Quarter Day',\r\n                'Half Day',\r\n                'Day',\r\n                'Week',\r\n                'Month',\r\n                'Year'\r\n            ],\r\n            bar_height: 20,\r\n            bar_corner_radius: 3,\r\n            arrow_curve: 5,\r\n            padding: 18,\r\n            view_mode: 'Day',\r\n            date_format: 'YYYY-MM-DD',\r\n            popup_trigger: 'click',\r\n            custom_popup_html: null,\r\n            language: 'en'\r\n        };\r\n        this.options = Object.assign({}, default_options, options);\r\n    }\r\n\r\n    setup_tasks(tasks) {\r\n        // prepare tasks\r\n        this.tasks = tasks.map((task, i) => {\r\n            // convert to Date objects\r\n            task._start = date_utils.parse(task.start);\r\n            task._end = date_utils.parse(task.end);\r\n\r\n            // make task invalid if duration too large\r\n            if (date_utils.diff(task._end, task._start, 'year') > 10) {\r\n                task.end = null;\r\n            }\r\n\r\n            // cache index\r\n            task._index = i;\r\n\r\n            // invalid dates\r\n            if (!task.start && !task.end) {\r\n                const today = date_utils.today();\r\n                task._start = today;\r\n                task._end = date_utils.add(today, 2, 'day');\r\n            }\r\n\r\n            if (!task.start && task.end) {\r\n                task._start = date_utils.add(task._end, -2, 'day');\r\n            }\r\n\r\n            if (task.start && !task.end) {\r\n                task._end = date_utils.add(task._start, 2, 'day');\r\n            }\r\n\r\n            // if hours is not set, assume the last day is full day\r\n            // e.g: 2018-09-09 becomes 2018-09-09 23:59:59\r\n            const task_end_values = date_utils.get_date_values(task._end);\r\n            if (task_end_values.slice(3).every(d => d === 0)) {\r\n                task._end = date_utils.add(task._end, 24, 'hour');\r\n            }\r\n\r\n            // invalid flag\r\n            if (!task.start || !task.end) {\r\n                task.invalid = true;\r\n            }\r\n\r\n            // dependencies\r\n            if (typeof task.dependencies === 'string' || !task.dependencies) {\r\n                let deps = [];\r\n                if (task.dependencies) {\r\n                    deps = task.dependencies\r\n                        .split(',')\r\n                        .map(d => d.trim())\r\n                        .filter(d => d);\r\n                }\r\n                task.dependencies = deps;\r\n            }\r\n\r\n            // uids\r\n            if (!task.id) {\r\n                task.id = generate_id(task);\r\n            }\r\n\r\n            return task;\r\n        });\r\n\r\n        this.setup_dependencies();\r\n    }\r\n\r\n    setup_dependencies() {\r\n        this.dependency_map = {};\r\n        for (let t of this.tasks) {\r\n            for (let d of t.dependencies) {\r\n                this.dependency_map[d] = this.dependency_map[d] || [];\r\n                this.dependency_map[d].push(t.id);\r\n            }\r\n        }\r\n    }\r\n\r\n    refresh(tasks) {\r\n        this.setup_tasks(tasks);\r\n        this.change_view_mode();\r\n    }\r\n\r\n    change_view_mode(mode = this.options.view_mode) {\r\n        this.update_view_scale(mode);\r\n        this.setup_dates();\r\n        this.render();\r\n        // fire viewmode_change event\r\n        this.trigger_event('view_change', [mode]);\r\n    }\r\n\r\n    update_view_scale(view_mode) {\r\n        this.options.view_mode = view_mode;\r\n\r\n        if (view_mode === 'Day') {\r\n            this.options.step = 24;\r\n            this.options.column_width = 38;\r\n        } else if (view_mode === 'Half Day') {\r\n            this.options.step = 24 / 2;\r\n            this.options.column_width = 38;\r\n        } else if (view_mode === 'Quarter Day') {\r\n            this.options.step = 24 / 4;\r\n            this.options.column_width = 38;\r\n        } else if (view_mode === 'Week') {\r\n            this.options.step = 24 * 7;\r\n            this.options.column_width = 140;\r\n        } else if (view_mode === 'Month') {\r\n            this.options.step = 24 * 30;\r\n            this.options.column_width = 120;\r\n        } else if (view_mode === 'Year') {\r\n            this.options.step = 24 * 365;\r\n            this.options.column_width = 120;\r\n        }\r\n    }\r\n\r\n    setup_dates() {\r\n        this.setup_gantt_dates();\r\n        this.setup_date_values();\r\n    }\r\n\r\n    setup_gantt_dates() {\r\n        this.gantt_start = this.gantt_end = null;\r\n\r\n        for (let task of this.tasks) {\r\n            // set global start and end date\r\n            if (!this.gantt_start || task._start < this.gantt_start) {\r\n                this.gantt_start = task._start;\r\n            }\r\n            if (!this.gantt_end || task._end > this.gantt_end) {\r\n                this.gantt_end = task._end;\r\n            }\r\n        }\r\n\r\n        this.gantt_start = date_utils.start_of(this.gantt_start, 'day');\r\n        this.gantt_end = date_utils.start_of(this.gantt_end, 'day');\r\n\r\n        // add date padding on both sides\r\n        if (this.view_is(['Quarter Day', 'Half Day'])) {\r\n            this.gantt_start = date_utils.add(this.gantt_start, -7, 'day');\r\n            this.gantt_end = date_utils.add(this.gantt_end, 7, 'day');\r\n        } else if (this.view_is('Month')) {\r\n            this.gantt_start = date_utils.start_of(this.gantt_start, 'year');\r\n            this.gantt_end = date_utils.add(this.gantt_end, 1, 'year');\r\n        } else if (this.view_is('Year')) {\r\n            this.gantt_start = date_utils.add(this.gantt_start, -2, 'year');\r\n            this.gantt_end = date_utils.add(this.gantt_end, 2, 'year');\r\n        } else {\r\n            this.gantt_start = date_utils.add(this.gantt_start, -1, 'month');\r\n            this.gantt_end = date_utils.add(this.gantt_end, 1, 'month');\r\n        }\r\n    }\r\n\r\n    setup_date_values() {\r\n        this.dates = [];\r\n        let cur_date = null;\r\n\r\n        while (cur_date === null || cur_date < this.gantt_end) {\r\n            if (!cur_date) {\r\n                cur_date = date_utils.clone(this.gantt_start);\r\n            } else {\r\n                if (this.view_is('Year')) {\r\n                    cur_date = date_utils.add(cur_date, 1, 'year');\r\n                } else if (this.view_is('Month')) {\r\n                    cur_date = date_utils.add(cur_date, 1, 'month');\r\n                } else {\r\n                    cur_date = date_utils.add(\r\n                        cur_date,\r\n                        this.options.step,\r\n                        'hour'\r\n                    );\r\n                }\r\n            }\r\n            this.dates.push(cur_date);\r\n        }\r\n    }\r\n\r\n    bind_events() {\r\n        this.bind_grid_click();\r\n        this.bind_bar_events();\r\n    }\r\n\r\n    render() {\r\n        this.clear();\r\n        this.setup_layers();\r\n        this.make_grid();\r\n        this.make_dates();\r\n        this.make_bars();\r\n        this.make_arrows();\r\n        this.map_arrows_on_bars();\r\n        this.set_width();\r\n        this.set_scroll_position();\r\n    }\r\n\r\n    setup_layers() {\r\n        this.layers = {};\r\n        const layers = ['grid', 'date', 'arrow', 'progress', 'bar', 'details'];\r\n        // make group layers\r\n        for (let layer of layers) {\r\n            this.layers[layer] = createSVG('g', {\r\n                class: layer,\r\n                append_to: this.$svg\r\n            });\r\n        }\r\n    }\r\n\r\n    make_grid() {\r\n        this.make_grid_background();\r\n        this.make_grid_rows();\r\n        this.make_grid_header();\r\n        this.make_grid_ticks();\r\n        this.make_grid_highlights();\r\n    }\r\n\r\n    make_grid_background() {\r\n        const grid_width = this.dates.length * this.options.column_width;\r\n        const grid_height =\r\n            this.options.header_height +\r\n            this.options.padding +\r\n            (this.options.bar_height + this.options.padding) *\r\n                this.tasks.length;\r\n\r\n        createSVG('rect', {\r\n            x: 0,\r\n            y: 0,\r\n            width: grid_width,\r\n            height: grid_height,\r\n            class: 'grid-background',\r\n            append_to: this.layers.grid\r\n        });\r\n\r\n        $.attr(this.$svg, {\r\n            height: grid_height + this.options.padding + 100,\r\n            width: '100%'\r\n        });\r\n    }\r\n\r\n    make_grid_rows() {\r\n        const rows_layer = createSVG('g', { append_to: this.layers.grid });\r\n        const lines_layer = createSVG('g', { append_to: this.layers.grid });\r\n\r\n        const row_width = this.dates.length * this.options.column_width;\r\n        const row_height = this.options.bar_height + this.options.padding;\r\n\r\n        let row_y = this.options.header_height + this.options.padding / 2;\r\n\r\n        for (let i = 0; i < this.tasks.length; i++) {\r\n            createSVG('rect', {\r\n                x: 0,\r\n                y: row_y,\r\n                width: row_width,\r\n                height: row_height,\r\n                class: 'grid-row',\r\n                append_to: rows_layer\r\n            });\r\n\r\n            createSVG('line', {\r\n                x1: 0,\r\n                y1: row_y + row_height,\r\n                x2: row_width,\r\n                y2: row_y + row_height,\r\n                class: 'row-line',\r\n                append_to: lines_layer\r\n            });\r\n\r\n            row_y += this.options.bar_height + this.options.padding;\r\n        }\r\n    }\r\n\r\n    make_grid_header() {\r\n        const header_width = this.dates.length * this.options.column_width;\r\n        const header_height = this.options.header_height + 10;\r\n        createSVG('rect', {\r\n            x: 0,\r\n            y: 0,\r\n            width: header_width,\r\n            height: header_height,\r\n            class: 'grid-header',\r\n            append_to: this.layers.grid\r\n        });\r\n    }\r\n\r\n    make_grid_ticks() {\r\n        let tick_x = 0;\r\n        let tick_y = this.options.header_height + this.options.padding / 2;\r\n        let tick_height =\r\n            (this.options.bar_height + this.options.padding) *\r\n            this.tasks.length;\r\n\r\n        for (let date of this.dates) {\r\n            let tick_class = 'tick';\r\n            // thick tick for monday\r\n            if (this.view_is('Day') && date.getDate() === 1) {\r\n                tick_class += ' thick';\r\n            }\r\n            // thick tick for first week\r\n            if (\r\n                this.view_is('Week') &&\r\n                date.getDate() >= 1 &&\r\n                date.getDate() < 8\r\n            ) {\r\n                tick_class += ' thick';\r\n            }\r\n            // thick ticks for quarters\r\n            if (this.view_is('Month') && (date.getMonth() + 1) % 3 === 0) {\r\n                tick_class += ' thick';\r\n            }\r\n\r\n            createSVG('path', {\r\n                d: `M ${tick_x} ${tick_y} v ${tick_height}`,\r\n                class: tick_class,\r\n                append_to: this.layers.grid\r\n            });\r\n\r\n            if (this.view_is('Month')) {\r\n                tick_x +=\r\n                    date_utils.get_days_in_month(date) *\r\n                    this.options.column_width /\r\n                    30;\r\n            } else {\r\n                tick_x += this.options.column_width;\r\n            }\r\n        }\r\n    }\r\n\r\n    make_grid_highlights() {\r\n        // highlight today's date\r\n        if (this.view_is('Day')) {\r\n            const x =\r\n                date_utils.diff(date_utils.today(), this.gantt_start, 'hour') /\r\n                this.options.step *\r\n                this.options.column_width;\r\n            const y = 0;\r\n\r\n            const width = this.options.column_width;\r\n            const height =\r\n                (this.options.bar_height + this.options.padding) *\r\n                    this.tasks.length +\r\n                this.options.header_height +\r\n                this.options.padding / 2;\r\n\r\n            createSVG('rect', {\r\n                x,\r\n                y,\r\n                width,\r\n                height,\r\n                class: 'today-highlight',\r\n                append_to: this.layers.grid\r\n            });\r\n        }\r\n    }\r\n\r\n    make_dates() {\r\n        for (let date of this.get_dates_to_draw()) {\r\n            createSVG('text', {\r\n                x: date.lower_x,\r\n                y: date.lower_y,\r\n                innerHTML: date.lower_text,\r\n                class: 'lower-text',\r\n                append_to: this.layers.date\r\n            });\r\n\r\n            if (date.upper_text) {\r\n                const $upper_text = createSVG('text', {\r\n                    x: date.upper_x,\r\n                    y: date.upper_y,\r\n                    innerHTML: date.upper_text,\r\n                    class: 'upper-text',\r\n                    append_to: this.layers.date\r\n                });\r\n\r\n                // remove out-of-bound dates\r\n                if (\r\n                    $upper_text.getBBox().x2 > this.layers.grid.getBBox().width\r\n                ) {\r\n                    $upper_text.remove();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    get_dates_to_draw() {\r\n        let last_date = null;\r\n        const dates = this.dates.map((date, i) => {\r\n            const d = this.get_date_info(date, last_date, i);\r\n            last_date = date;\r\n            return d;\r\n        });\r\n        return dates;\r\n    }\r\n\r\n    get_date_info(date, last_date, i) {\r\n        if (!last_date) {\r\n            last_date = date_utils.add(date, 1, 'year');\r\n        }\r\n        const date_text = {\r\n            'Quarter Day_lower': date_utils.format(\r\n                date,\r\n                'HH',\r\n                this.options.language\r\n            ),\r\n            'Half Day_lower': date_utils.format(\r\n                date,\r\n                'HH',\r\n                this.options.language\r\n            ),\r\n            Day_lower:\r\n                date.getDate() !== last_date.getDate()\r\n                    ? date_utils.format(date, 'D', this.options.language)\r\n                    : '',\r\n            Week_lower:\r\n                date.getMonth() !== last_date.getMonth()\r\n                    ? date_utils.format(date, 'D MMM', this.options.language)\r\n                    : date_utils.format(date, 'D', this.options.language),\r\n            Month_lower: date_utils.format(date, 'MMMM', this.options.language),\r\n            Year_lower: date_utils.format(date, 'YYYY', this.options.language),\r\n            'Quarter Day_upper':\r\n                date.getDate() !== last_date.getDate()\r\n                    ? date_utils.format(date, 'D MMM', this.options.language)\r\n                    : '',\r\n            'Half Day_upper':\r\n                date.getDate() !== last_date.getDate()\r\n                    ? date.getMonth() !== last_date.getMonth()\r\n                      ? date_utils.format(date, 'D MMM', this.options.language)\r\n                      : date_utils.format(date, 'D', this.options.language)\r\n                    : '',\r\n            Day_upper:\r\n                date.getMonth() !== last_date.getMonth()\r\n                    ? date_utils.format(date, 'MMMM', this.options.language)\r\n                    : '',\r\n            Week_upper:\r\n                date.getMonth() !== last_date.getMonth()\r\n                    ? date_utils.format(date, 'MMMM', this.options.language)\r\n                    : '',\r\n            Month_upper:\r\n                date.getFullYear() !== last_date.getFullYear()\r\n                    ? date_utils.format(date, 'YYYY', this.options.language)\r\n                    : '',\r\n            Year_upper:\r\n                date.getFullYear() !== last_date.getFullYear()\r\n                    ? date_utils.format(date, 'YYYY', this.options.language)\r\n                    : ''\r\n        };\r\n\r\n        const base_pos = {\r\n            x: i * this.options.column_width,\r\n            lower_y: this.options.header_height,\r\n            upper_y: this.options.header_height - 25\r\n        };\r\n\r\n        const x_pos = {\r\n            'Quarter Day_lower': this.options.column_width * 4 / 2,\r\n            'Quarter Day_upper': 0,\r\n            'Half Day_lower': this.options.column_width * 2 / 2,\r\n            'Half Day_upper': 0,\r\n            Day_lower: this.options.column_width / 2,\r\n            Day_upper: this.options.column_width * 30 / 2,\r\n            Week_lower: 0,\r\n            Week_upper: this.options.column_width * 4 / 2,\r\n            Month_lower: this.options.column_width / 2,\r\n            Month_upper: this.options.column_width * 12 / 2,\r\n            Year_lower: this.options.column_width / 2,\r\n            Year_upper: this.options.column_width * 30 / 2\r\n        };\r\n\r\n        return {\r\n            upper_text: date_text[`${this.options.view_mode}_upper`],\r\n            lower_text: date_text[`${this.options.view_mode}_lower`],\r\n            upper_x: base_pos.x + x_pos[`${this.options.view_mode}_upper`],\r\n            upper_y: base_pos.upper_y,\r\n            lower_x: base_pos.x + x_pos[`${this.options.view_mode}_lower`],\r\n            lower_y: base_pos.lower_y\r\n        };\r\n    }\r\n\r\n    make_bars() {\r\n        this.bars = this.tasks.map(task => {\r\n            const bar = new Bar(this, task);\r\n            this.layers.bar.appendChild(bar.group);\r\n            return bar;\r\n        });\r\n    }\r\n\r\n    make_arrows() {\r\n        this.arrows = [];\r\n        for (let task of this.tasks) {\r\n            let arrows = [];\r\n            arrows = task.dependencies\r\n                .map(task_id => {\r\n                    const dependency = this.get_task(task_id);\r\n                    if (!dependency) return null;\r\n                    const arrow = new Arrow(\r\n                        this,\r\n                        this.bars[dependency._index], // from_task\r\n                        this.bars[task._index] // to_task\r\n                    );\r\n                    this.layers.arrow.appendChild(arrow.element);\r\n                    return arrow;\r\n                })\r\n                .filter(Boolean); // filter falsy values\r\n            this.arrows = this.arrows.concat(arrows);\r\n        }\r\n    }\r\n\r\n    map_arrows_on_bars() {\r\n        for (let bar of this.bars) {\r\n            bar.arrows = this.arrows.filter(arrow => {\r\n                return (\r\n                    arrow.from_task.task.id === bar.task.id ||\r\n                    arrow.to_task.task.id === bar.task.id\r\n                );\r\n            });\r\n        }\r\n    }\r\n\r\n    set_width() {\r\n        const cur_width = this.$svg.getBoundingClientRect().width;\r\n        const actual_width = this.$svg\r\n            .querySelector('.grid .grid-row')\r\n            .getAttribute('width');\r\n        if (cur_width < actual_width) {\r\n            this.$svg.setAttribute('width', actual_width);\r\n        }\r\n    }\r\n\r\n    set_scroll_position() {\r\n        const parent_element = this.$svg.parentElement;\r\n        if (!parent_element) return;\r\n\r\n        const hours_before_first_task = date_utils.diff(\r\n            this.get_oldest_starting_date(),\r\n            this.gantt_start,\r\n            'hour'\r\n        );\r\n\r\n        const scroll_pos =\r\n            hours_before_first_task /\r\n                this.options.step *\r\n                this.options.column_width -\r\n            this.options.column_width;\r\n\r\n        parent_element.scrollLeft = scroll_pos;\r\n    }\r\n\r\n    bind_grid_click() {\r\n        $.on(\r\n            this.$svg,\r\n            this.options.popup_trigger,\r\n            '.grid-row, .grid-header',\r\n            () => {\r\n                this.unselect_all();\r\n                this.hide_popup();\r\n            }\r\n        );\r\n    }\r\n\r\n    bind_bar_events() {\r\n        let is_dragging = false;\r\n        let x_on_start = 0;\r\n        let is_resizing_left = false;\r\n        let is_resizing_right = false;\r\n        let parent_bar_id = null;\r\n        let bars = []; // instanceof Bar\r\n        this.bar_being_dragged = null;\r\n\r\n        function action_in_progress() {\r\n            return is_dragging || is_resizing_left || is_resizing_right;\r\n        }\r\n\r\n        $.on(this.$svg, 'mousedown', '.bar-wrapper, .handle', (e, element) => {\r\n            const bar_wrapper = $.closest('.bar-wrapper', element);\r\n\r\n            if (element.classList.contains('left')) {\r\n                is_resizing_left = true;\r\n            } else if (element.classList.contains('right')) {\r\n                is_resizing_right = true;\r\n            } else if (element.classList.contains('bar-wrapper')) {\r\n                is_dragging = true;\r\n            }\r\n\r\n            bar_wrapper.classList.add('active');\r\n\r\n            x_on_start = e.offsetX;\r\n\r\n            parent_bar_id = bar_wrapper.getAttribute('data-id');\r\n            const ids = [\r\n                parent_bar_id,\r\n                ...this.get_all_dependent_tasks(parent_bar_id)\r\n            ];\r\n            bars = ids.map(id => this.get_bar(id));\r\n\r\n            this.bar_being_dragged = parent_bar_id;\r\n\r\n            bars.forEach(bar => {\r\n                const $bar = bar.$bar;\r\n                $bar.ox = $bar.getX();\r\n                $bar.oy = $bar.getY();\r\n                $bar.owidth = $bar.getWidth();\r\n                $bar.finaldx = 0;\r\n            });\r\n        });\r\n\r\n        $.on(this.$svg, 'mousemove', e => {\r\n            if (!action_in_progress()) return;\r\n            const dx = e.offsetX - x_on_start;\r\n\r\n            bars.forEach(bar => {\r\n                const $bar = bar.$bar;\r\n                $bar.finaldx = this.get_snap_position(dx);\r\n\r\n                if (is_resizing_left) {\r\n                    if (parent_bar_id === bar.task.id) {\r\n                        bar.update_bar_position({\r\n                            x: $bar.ox + $bar.finaldx,\r\n                            width: $bar.owidth - $bar.finaldx\r\n                        });\r\n                    } else {\r\n                        bar.update_bar_position({\r\n                            x: $bar.ox + $bar.finaldx\r\n                        });\r\n                    }\r\n                } else if (is_resizing_right) {\r\n                    if (parent_bar_id === bar.task.id) {\r\n                        bar.update_bar_position({\r\n                            width: $bar.owidth + $bar.finaldx\r\n                        });\r\n                    }\r\n                } else if (is_dragging) {\r\n                    bar.update_bar_position({ x: $bar.ox + $bar.finaldx });\r\n                }\r\n            });\r\n        });\r\n\r\n        document.addEventListener('mouseup', e => {\r\n            if (is_dragging || is_resizing_left || is_resizing_right) {\r\n                bars.forEach(bar => bar.group.classList.remove('active'));\r\n            }\r\n\r\n            is_dragging = false;\r\n            is_resizing_left = false;\r\n            is_resizing_right = false;\r\n        });\r\n\r\n        $.on(this.$svg, 'mouseup', e => {\r\n            this.bar_being_dragged = null;\r\n            bars.forEach(bar => {\r\n                const $bar = bar.$bar;\r\n                if (!$bar.finaldx) return;\r\n                bar.date_changed();\r\n                bar.set_action_completed();\r\n            });\r\n        });\r\n\r\n        this.bind_bar_progress();\r\n    }\r\n\r\n    bind_bar_progress() {\r\n        let x_on_start = 0;\r\n        let is_resizing = null;\r\n        let bar = null;\r\n        let $bar_progress = null;\r\n        let $bar = null;\r\n\r\n        $.on(this.$svg, 'mousedown', '.handle.progress', (e, handle) => {\r\n            is_resizing = true;\r\n            x_on_start = e.offsetX;\r\n\r\n            const $bar_wrapper = $.closest('.bar-wrapper', handle);\r\n            const id = $bar_wrapper.getAttribute('data-id');\r\n            bar = this.get_bar(id);\r\n\r\n            $bar_progress = bar.$bar_progress;\r\n            $bar = bar.$bar;\r\n\r\n            $bar_progress.finaldx = 0;\r\n            $bar_progress.owidth = $bar_progress.getWidth();\r\n            $bar_progress.min_dx = -$bar_progress.getWidth();\r\n            $bar_progress.max_dx = $bar.getWidth() - $bar_progress.getWidth();\r\n        });\r\n\r\n        $.on(this.$svg, 'mousemove', e => {\r\n            if (!is_resizing) return;\r\n            let dx = e.offsetX - x_on_start;\r\n\r\n            if (dx > $bar_progress.max_dx) {\r\n                dx = $bar_progress.max_dx;\r\n            }\r\n            if (dx < $bar_progress.min_dx) {\r\n                dx = $bar_progress.min_dx;\r\n            }\r\n\r\n            const $handle = bar.$handle_progress;\r\n            $.attr($bar_progress, 'width', $bar_progress.owidth + dx);\r\n            $.attr($handle, 'points', bar.get_progress_polygon_points());\r\n            $bar_progress.finaldx = dx;\r\n        });\r\n\r\n        $.on(this.$svg, 'mouseup', () => {\r\n            is_resizing = false;\r\n            if (!($bar_progress && $bar_progress.finaldx)) return;\r\n            bar.progress_changed();\r\n            bar.set_action_completed();\r\n        });\r\n    }\r\n\r\n    get_all_dependent_tasks(task_id) {\r\n        let out = [];\r\n        let to_process = [task_id];\r\n        let was_processed = d => !to_process.includes(d);\r\n        while (to_process.length) {\r\n            const deps = to_process.reduce((acc, curr) => {\r\n                acc = acc.concat(this.dependency_map[curr]);\r\n                return acc;\r\n            }, []);\r\n\r\n            out = out.concat(deps);\r\n            to_process = deps.filter(was_processed);\r\n        }\r\n\r\n        return out.filter(Boolean);\r\n    }\r\n\r\n    get_snap_position(dx) {\r\n        let odx = dx,\r\n            rem,\r\n            position;\r\n\r\n        if (this.view_is('Week')) {\r\n            rem = dx % (this.options.column_width / 7);\r\n            position =\r\n                odx -\r\n                rem +\r\n                (rem < this.options.column_width / 14\r\n                    ? 0\r\n                    : this.options.column_width / 7);\r\n        } else if (this.view_is('Month')) {\r\n            rem = dx % (this.options.column_width / 30);\r\n            position =\r\n                odx -\r\n                rem +\r\n                (rem < this.options.column_width / 60\r\n                    ? 0\r\n                    : this.options.column_width / 30);\r\n        } else {\r\n            rem = dx % this.options.column_width;\r\n            position =\r\n                odx -\r\n                rem +\r\n                (rem < this.options.column_width / 2\r\n                    ? 0\r\n                    : this.options.column_width);\r\n        }\r\n        return position;\r\n    }\r\n\r\n    unselect_all() {\r\n        [...this.$svg.querySelectorAll('.bar-wrapper')].forEach(el => {\r\n            el.classList.remove('active');\r\n        });\r\n    }\r\n\r\n    view_is(modes) {\r\n        if (typeof modes === 'string') {\r\n            return this.options.view_mode === modes;\r\n        }\r\n\r\n        if (Array.isArray(modes)) {\r\n            return modes.some(mode => this.options.view_mode === mode);\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    get_task(id) {\r\n        return this.tasks.find(task => {\r\n            return task.id === id;\r\n        });\r\n    }\r\n\r\n    get_bar(id) {\r\n        return this.bars.find(bar => {\r\n            return bar.task.id === id;\r\n        });\r\n    }\r\n\r\n    show_popup(options) {\r\n        if (!this.popup) {\r\n            this.popup = new Popup(\r\n                this.popup_wrapper,\r\n                this.options.custom_popup_html\r\n            );\r\n        }\r\n        this.popup.show(options);\r\n    }\r\n\r\n    hide_popup() {\r\n        this.popup && this.popup.hide();\r\n    }\r\n\r\n    trigger_event(event, args) {\r\n        if (this.options['on_' + event]) {\r\n            this.options['on_' + event].apply(null, args);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the oldest starting date from the list of tasks\r\n     *\r\n     * @returns Date\r\n     * @memberof Gantt\r\n     */\r\n    get_oldest_starting_date() {\r\n        return this.tasks\r\n            .map(task => task._start)\r\n            .reduce(\r\n                (prev_date, cur_date) =>\r\n                    cur_date <= prev_date ? cur_date : prev_date\r\n            );\r\n    }\r\n\r\n    /**\r\n     * Clear all elements from the parent svg element\r\n     *\r\n     * @memberof Gantt\r\n     */\r\n    clear() {\r\n        this.$svg.innerHTML = '';\r\n    }\r\n}\r\n\r\nfunction generate_id(task) {\r\n    return (\r\n        task.name +\r\n        '_' +\r\n        Math.random()\r\n            .toString(36)\r\n            .slice(2, 12)\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}