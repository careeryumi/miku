{"ast":null,"code":"import date_utils from './date_utils';\nimport { $, createSVG, animateSVG } from './svg_utils';\nexport default class Bar {\n  constructor(gantt, task) {\n    this.set_defaults(gantt, task);\n    this.prepare();\n    this.draw();\n    this.bind();\n  }\n\n  set_defaults(gantt, task) {\n    this.action_completed = false;\n    this.gantt = gantt;\n    this.task = task;\n  }\n\n  prepare() {\n    this.prepare_values();\n    this.prepare_helpers();\n  }\n\n  prepare_values() {\n    this.invalid = this.task.invalid;\n    this.height = this.gantt.options.bar_height;\n    this.x = this.compute_x();\n    this.y = this.compute_y();\n    this.corner_radius = this.gantt.options.bar_corner_radius;\n    this.duration = date_utils.diff(this.task._end, this.task._start, 'hour') / this.gantt.options.step;\n    this.width = this.gantt.options.column_width * this.duration;\n    this.progress_width = this.gantt.options.column_width * this.duration * (this.task.progress / 100) || 0;\n    this.group = createSVG('g', {\n      class: 'bar-wrapper ' + (this.task.custom_class || ''),\n      'data-id': this.task.id\n    });\n    this.bar_group = createSVG('g', {\n      class: 'bar-group',\n      append_to: this.group\n    });\n    this.handle_group = createSVG('g', {\n      class: 'handle-group',\n      append_to: this.group\n    });\n  }\n\n  prepare_helpers() {\n    SVGElement.prototype.getX = function () {\n      return +this.getAttribute('x');\n    };\n\n    SVGElement.prototype.getY = function () {\n      return +this.getAttribute('y');\n    };\n\n    SVGElement.prototype.getWidth = function () {\n      return +this.getAttribute('width');\n    };\n\n    SVGElement.prototype.getHeight = function () {\n      return +this.getAttribute('height');\n    };\n\n    SVGElement.prototype.getEndX = function () {\n      return this.getX() + this.getWidth();\n    };\n  }\n\n  draw() {\n    this.draw_bar();\n    this.draw_progress_bar();\n    this.draw_label();\n    this.draw_resize_handles();\n  }\n\n  draw_bar() {\n    this.$bar = createSVG('rect', {\n      x: this.x,\n      y: this.y,\n      width: this.width,\n      height: this.height,\n      rx: this.corner_radius,\n      ry: this.corner_radius,\n      class: 'bar',\n      append_to: this.bar_group\n    });\n    animateSVG(this.$bar, 'width', 0, this.width);\n\n    if (this.invalid) {\n      this.$bar.classList.add('bar-invalid');\n    }\n  }\n\n  draw_progress_bar() {\n    if (this.invalid) return;\n    this.$bar_progress = createSVG('rect', {\n      x: this.x,\n      y: this.y,\n      width: this.progress_width,\n      height: this.height,\n      rx: this.corner_radius,\n      ry: this.corner_radius,\n      class: 'bar-progress',\n      append_to: this.bar_group\n    });\n    animateSVG(this.$bar_progress, 'width', 0, this.progress_width);\n  }\n\n  draw_label() {\n    createSVG('text', {\n      x: this.x + this.width / 2,\n      y: this.y + this.height / 2,\n      innerHTML: this.task.name,\n      class: 'bar-label',\n      append_to: this.bar_group\n    }); // labels get BBox in the next tick\n\n    requestAnimationFrame(() => this.update_label_position());\n  }\n\n  draw_resize_handles() {\n    if (this.invalid) return;\n    const bar = this.$bar;\n    const handle_width = 8;\n    createSVG('rect', {\n      x: bar.getX() + bar.getWidth() - 9,\n      y: bar.getY() + 1,\n      width: handle_width,\n      height: this.height - 2,\n      rx: this.corner_radius,\n      ry: this.corner_radius,\n      class: 'handle right',\n      append_to: this.handle_group\n    });\n    createSVG('rect', {\n      x: bar.getX() + 1,\n      y: bar.getY() + 1,\n      width: handle_width,\n      height: this.height - 2,\n      rx: this.corner_radius,\n      ry: this.corner_radius,\n      class: 'handle left',\n      append_to: this.handle_group\n    });\n\n    if (this.task.progress && this.task.progress < 100) {\n      this.$handle_progress = createSVG('polygon', {\n        points: this.get_progress_polygon_points().join(','),\n        class: 'handle progress',\n        append_to: this.handle_group\n      });\n    }\n  }\n\n  get_progress_polygon_points() {\n    const bar_progress = this.$bar_progress;\n    return [bar_progress.getEndX() - 5, bar_progress.getY() + bar_progress.getHeight(), bar_progress.getEndX() + 5, bar_progress.getY() + bar_progress.getHeight(), bar_progress.getEndX(), bar_progress.getY() + bar_progress.getHeight() - 8.66];\n  }\n\n  bind() {\n    if (this.invalid) return;\n    this.setup_click_event();\n  }\n\n  setup_click_event() {\n    $.on(this.group, 'focus ' + this.gantt.options.popup_trigger, e => {\n      if (this.action_completed) {\n        // just finished a move action, wait for a few seconds\n        return;\n      }\n\n      if (e.type === 'click') {\n        this.gantt.trigger_event('click', [this.task]);\n      }\n\n      this.gantt.unselect_all();\n      this.group.classList.toggle('active');\n      this.show_popup();\n    });\n  }\n\n  show_popup() {\n    if (this.gantt.bar_being_dragged) return;\n    const start_date = date_utils.format(this.task._start, 'MMM D');\n    const end_date = date_utils.format(date_utils.add(this.task._end, -1, 'second'), 'MMM D');\n    const subtitle = start_date + ' - ' + end_date;\n    this.gantt.show_popup({\n      target_element: this.$bar,\n      title: this.task.name,\n      subtitle: subtitle,\n      task: this.task\n    });\n  }\n\n  update_bar_position({\n    x = null,\n    width = null\n  }) {\n    const bar = this.$bar;\n\n    if (x) {\n      // get all x values of parent task\n      const xs = this.task.dependencies.map(dep => {\n        return this.gantt.get_bar(dep).$bar.getX();\n      }); // child task must not go before parent\n\n      const valid_x = xs.reduce((prev, curr) => {\n        return x >= curr;\n      }, x);\n\n      if (!valid_x) {\n        width = null;\n        return;\n      }\n\n      this.update_attr(bar, 'x', x);\n    }\n\n    if (width && width >= this.gantt.options.column_width) {\n      this.update_attr(bar, 'width', width);\n    }\n\n    this.update_label_position();\n    this.update_handle_position();\n    this.update_progressbar_position();\n    this.update_arrow_position();\n  }\n\n  date_changed() {\n    let changed = false;\n    const {\n      new_start_date,\n      new_end_date\n    } = this.compute_start_end_date();\n\n    if (Number(this.task._start) !== Number(new_start_date)) {\n      changed = true;\n      this.task._start = new_start_date;\n    }\n\n    if (Number(this.task._end) !== Number(new_end_date)) {\n      changed = true;\n      this.task._end = new_end_date;\n    }\n\n    if (!changed) return;\n    this.gantt.trigger_event('date_change', [this.task, new_start_date, date_utils.add(new_end_date, -1, 'second')]);\n  }\n\n  progress_changed() {\n    const new_progress = this.compute_progress();\n    this.task.progress = new_progress;\n    this.gantt.trigger_event('progress_change', [this.task, new_progress]);\n  }\n\n  set_action_completed() {\n    this.action_completed = true;\n    setTimeout(() => this.action_completed = false, 1000);\n  }\n\n  compute_start_end_date() {\n    const bar = this.$bar;\n    const x_in_units = bar.getX() / this.gantt.options.column_width;\n    const new_start_date = date_utils.add(this.gantt.gantt_start, x_in_units * this.gantt.options.step, 'hour');\n    const width_in_units = bar.getWidth() / this.gantt.options.column_width;\n    const new_end_date = date_utils.add(new_start_date, width_in_units * this.gantt.options.step, 'hour');\n    return {\n      new_start_date,\n      new_end_date\n    };\n  }\n\n  compute_progress() {\n    const progress = this.$bar_progress.getWidth() / this.$bar.getWidth() * 100;\n    return parseInt(progress, 10);\n  }\n\n  compute_x() {\n    const {\n      step,\n      column_width\n    } = this.gantt.options;\n    const task_start = this.task._start;\n    const gantt_start = this.gantt.gantt_start;\n    const diff = date_utils.diff(task_start, gantt_start, 'hour');\n    let x = diff / step * column_width;\n\n    if (this.gantt.view_is('Month')) {\n      const diff = date_utils.diff(task_start, gantt_start, 'day');\n      x = diff * column_width / 30;\n    }\n\n    return x;\n  }\n\n  compute_y() {\n    return this.gantt.options.header_height + this.gantt.options.padding + this.task._index * (this.height + this.gantt.options.padding);\n  }\n\n  get_snap_position(dx) {\n    let odx = dx,\n        rem,\n        position;\n\n    if (this.gantt.view_is('Week')) {\n      rem = dx % (this.gantt.options.column_width / 7);\n      position = odx - rem + (rem < this.gantt.options.column_width / 14 ? 0 : this.gantt.options.column_width / 7);\n    } else if (this.gantt.view_is('Month')) {\n      rem = dx % (this.gantt.options.column_width / 30);\n      position = odx - rem + (rem < this.gantt.options.column_width / 60 ? 0 : this.gantt.options.column_width / 30);\n    } else {\n      rem = dx % this.gantt.options.column_width;\n      position = odx - rem + (rem < this.gantt.options.column_width / 2 ? 0 : this.gantt.options.column_width);\n    }\n\n    return position;\n  }\n\n  update_attr(element, attr, value) {\n    value = +value;\n\n    if (!isNaN(value)) {\n      element.setAttribute(attr, value);\n    }\n\n    return element;\n  }\n\n  update_progressbar_position() {\n    this.$bar_progress.setAttribute('x', this.$bar.getX());\n    this.$bar_progress.setAttribute('width', this.$bar.getWidth() * (this.task.progress / 100));\n  }\n\n  update_label_position() {\n    const bar = this.$bar,\n          label = this.group.querySelector('.bar-label');\n\n    if (label.getBBox().width > bar.getWidth()) {\n      label.classList.add('big');\n      label.setAttribute('x', bar.getX() + bar.getWidth() + 5);\n    } else {\n      label.classList.remove('big');\n      label.setAttribute('x', bar.getX() + bar.getWidth() / 2);\n    }\n  }\n\n  update_handle_position() {\n    const bar = this.$bar;\n    this.handle_group.querySelector('.handle.left').setAttribute('x', bar.getX() + 1);\n    this.handle_group.querySelector('.handle.right').setAttribute('x', bar.getEndX() - 9);\n    const handle = this.group.querySelector('.handle.progress');\n    handle && handle.setAttribute('points', this.get_progress_polygon_points());\n  }\n\n  update_arrow_position() {\n    this.arrows = this.arrows || [];\n\n    for (let arrow of this.arrows) {\n      arrow.update();\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Mikutech/mikutechWebProgrammingTest2/src/frappe-gantt/bar.js"],"names":["date_utils","$","createSVG","animateSVG","Bar","constructor","gantt","task","set_defaults","prepare","draw","bind","action_completed","prepare_values","prepare_helpers","invalid","height","options","bar_height","x","compute_x","y","compute_y","corner_radius","bar_corner_radius","duration","diff","_end","_start","step","width","column_width","progress_width","progress","group","class","custom_class","id","bar_group","append_to","handle_group","SVGElement","prototype","getX","getAttribute","getY","getWidth","getHeight","getEndX","draw_bar","draw_progress_bar","draw_label","draw_resize_handles","$bar","rx","ry","classList","add","$bar_progress","innerHTML","name","requestAnimationFrame","update_label_position","bar","handle_width","$handle_progress","points","get_progress_polygon_points","join","bar_progress","setup_click_event","on","popup_trigger","e","type","trigger_event","unselect_all","toggle","show_popup","bar_being_dragged","start_date","format","end_date","subtitle","target_element","title","update_bar_position","xs","dependencies","map","dep","get_bar","valid_x","reduce","prev","curr","update_attr","update_handle_position","update_progressbar_position","update_arrow_position","date_changed","changed","new_start_date","new_end_date","compute_start_end_date","Number","progress_changed","new_progress","compute_progress","set_action_completed","setTimeout","x_in_units","gantt_start","width_in_units","parseInt","task_start","view_is","header_height","padding","_index","get_snap_position","dx","odx","rem","position","element","attr","value","isNaN","setAttribute","label","querySelector","getBBox","remove","handle","arrows","arrow","update"],"mappings":"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","sourcesContent":["import date_utils from './date_utils';\r\nimport { $, createSVG, animateSVG } from './svg_utils';\r\n\r\nexport default class Bar {\r\n    constructor(gantt, task) {\r\n        this.set_defaults(gantt, task);\r\n        this.prepare();\r\n        this.draw();\r\n        this.bind();\r\n    }\r\n\r\n    set_defaults(gantt, task) {\r\n        this.action_completed = false;\r\n        this.gantt = gantt;\r\n        this.task = task;\r\n    }\r\n\r\n    prepare() {\r\n        this.prepare_values();\r\n        this.prepare_helpers();\r\n    }\r\n\r\n    prepare_values() {\r\n        this.invalid = this.task.invalid;\r\n        this.height = this.gantt.options.bar_height;\r\n        this.x = this.compute_x();\r\n        this.y = this.compute_y();\r\n        this.corner_radius = this.gantt.options.bar_corner_radius;\r\n        this.duration =\r\n            date_utils.diff(this.task._end, this.task._start, 'hour') /\r\n            this.gantt.options.step;\r\n        this.width = this.gantt.options.column_width * this.duration;\r\n        this.progress_width =\r\n            this.gantt.options.column_width *\r\n                this.duration *\r\n                (this.task.progress / 100) || 0;\r\n        this.group = createSVG('g', {\r\n            class: 'bar-wrapper ' + (this.task.custom_class || ''),\r\n            'data-id': this.task.id\r\n        });\r\n        this.bar_group = createSVG('g', {\r\n            class: 'bar-group',\r\n            append_to: this.group\r\n        });\r\n        this.handle_group = createSVG('g', {\r\n            class: 'handle-group',\r\n            append_to: this.group\r\n        });\r\n    }\r\n\r\n    prepare_helpers() {\r\n        SVGElement.prototype.getX = function() {\r\n            return +this.getAttribute('x');\r\n        };\r\n        SVGElement.prototype.getY = function() {\r\n            return +this.getAttribute('y');\r\n        };\r\n        SVGElement.prototype.getWidth = function() {\r\n            return +this.getAttribute('width');\r\n        };\r\n        SVGElement.prototype.getHeight = function() {\r\n            return +this.getAttribute('height');\r\n        };\r\n        SVGElement.prototype.getEndX = function() {\r\n            return this.getX() + this.getWidth();\r\n        };\r\n    }\r\n\r\n    draw() {\r\n        this.draw_bar();\r\n        this.draw_progress_bar();\r\n        this.draw_label();\r\n        this.draw_resize_handles();\r\n    }\r\n\r\n    draw_bar() {\r\n        this.$bar = createSVG('rect', {\r\n            x: this.x,\r\n            y: this.y,\r\n            width: this.width,\r\n            height: this.height,\r\n            rx: this.corner_radius,\r\n            ry: this.corner_radius,\r\n            class: 'bar',\r\n            append_to: this.bar_group\r\n        });\r\n\r\n        animateSVG(this.$bar, 'width', 0, this.width);\r\n\r\n        if (this.invalid) {\r\n            this.$bar.classList.add('bar-invalid');\r\n        }\r\n    }\r\n\r\n    draw_progress_bar() {\r\n        if (this.invalid) return;\r\n        this.$bar_progress = createSVG('rect', {\r\n            x: this.x,\r\n            y: this.y,\r\n            width: this.progress_width,\r\n            height: this.height,\r\n            rx: this.corner_radius,\r\n            ry: this.corner_radius,\r\n            class: 'bar-progress',\r\n            append_to: this.bar_group\r\n        });\r\n\r\n        animateSVG(this.$bar_progress, 'width', 0, this.progress_width);\r\n    }\r\n\r\n    draw_label() {\r\n        createSVG('text', {\r\n            x: this.x + this.width / 2,\r\n            y: this.y + this.height / 2,\r\n            innerHTML: this.task.name,\r\n            class: 'bar-label',\r\n            append_to: this.bar_group\r\n        });\r\n        // labels get BBox in the next tick\r\n        requestAnimationFrame(() => this.update_label_position());\r\n    }\r\n\r\n    draw_resize_handles() {\r\n        if (this.invalid) return;\r\n\r\n        const bar = this.$bar;\r\n        const handle_width = 8;\r\n\r\n        createSVG('rect', {\r\n            x: bar.getX() + bar.getWidth() - 9,\r\n            y: bar.getY() + 1,\r\n            width: handle_width,\r\n            height: this.height - 2,\r\n            rx: this.corner_radius,\r\n            ry: this.corner_radius,\r\n            class: 'handle right',\r\n            append_to: this.handle_group\r\n        });\r\n\r\n        createSVG('rect', {\r\n            x: bar.getX() + 1,\r\n            y: bar.getY() + 1,\r\n            width: handle_width,\r\n            height: this.height - 2,\r\n            rx: this.corner_radius,\r\n            ry: this.corner_radius,\r\n            class: 'handle left',\r\n            append_to: this.handle_group\r\n        });\r\n\r\n        if (this.task.progress && this.task.progress < 100) {\r\n            this.$handle_progress = createSVG('polygon', {\r\n                points: this.get_progress_polygon_points().join(','),\r\n                class: 'handle progress',\r\n                append_to: this.handle_group\r\n            });\r\n        }\r\n    }\r\n\r\n    get_progress_polygon_points() {\r\n        const bar_progress = this.$bar_progress;\r\n        return [\r\n            bar_progress.getEndX() - 5,\r\n            bar_progress.getY() + bar_progress.getHeight(),\r\n            bar_progress.getEndX() + 5,\r\n            bar_progress.getY() + bar_progress.getHeight(),\r\n            bar_progress.getEndX(),\r\n            bar_progress.getY() + bar_progress.getHeight() - 8.66\r\n        ];\r\n    }\r\n\r\n    bind() {\r\n        if (this.invalid) return;\r\n        this.setup_click_event();\r\n    }\r\n\r\n    setup_click_event() {\r\n        $.on(this.group, 'focus ' + this.gantt.options.popup_trigger, e => {\r\n            if (this.action_completed) {\r\n                // just finished a move action, wait for a few seconds\r\n                return;\r\n            }\r\n\r\n            if (e.type === 'click') {\r\n                this.gantt.trigger_event('click', [this.task]);\r\n            }\r\n\r\n            this.gantt.unselect_all();\r\n            this.group.classList.toggle('active');\r\n\r\n            this.show_popup();\r\n        });\r\n    }\r\n\r\n    show_popup() {\r\n        if (this.gantt.bar_being_dragged) return;\r\n\r\n        const start_date = date_utils.format(this.task._start, 'MMM D');\r\n        const end_date = date_utils.format(\r\n            date_utils.add(this.task._end, -1, 'second'),\r\n            'MMM D'\r\n        );\r\n        const subtitle = start_date + ' - ' + end_date;\r\n\r\n        this.gantt.show_popup({\r\n            target_element: this.$bar,\r\n            title: this.task.name,\r\n            subtitle: subtitle,\r\n            task: this.task\r\n        });\r\n    }\r\n\r\n    update_bar_position({ x = null, width = null }) {\r\n        const bar = this.$bar;\r\n        if (x) {\r\n            // get all x values of parent task\r\n            const xs = this.task.dependencies.map(dep => {\r\n                return this.gantt.get_bar(dep).$bar.getX();\r\n            });\r\n            // child task must not go before parent\r\n            const valid_x = xs.reduce((prev, curr) => {\r\n                return x >= curr;\r\n            }, x);\r\n            if (!valid_x) {\r\n                width = null;\r\n                return;\r\n            }\r\n            this.update_attr(bar, 'x', x);\r\n        }\r\n        if (width && width >= this.gantt.options.column_width) {\r\n            this.update_attr(bar, 'width', width);\r\n        }\r\n        this.update_label_position();\r\n        this.update_handle_position();\r\n        this.update_progressbar_position();\r\n        this.update_arrow_position();\r\n    }\r\n\r\n    date_changed() {\r\n        let changed = false;\r\n        const { new_start_date, new_end_date } = this.compute_start_end_date();\r\n\r\n        if (Number(this.task._start) !== Number(new_start_date)) {\r\n            changed = true;\r\n            this.task._start = new_start_date;\r\n        }\r\n\r\n        if (Number(this.task._end) !== Number(new_end_date)) {\r\n            changed = true;\r\n            this.task._end = new_end_date;\r\n        }\r\n\r\n        if (!changed) return;\r\n\r\n        this.gantt.trigger_event('date_change', [\r\n            this.task,\r\n            new_start_date,\r\n            date_utils.add(new_end_date, -1, 'second')\r\n        ]);\r\n    }\r\n\r\n    progress_changed() {\r\n        const new_progress = this.compute_progress();\r\n        this.task.progress = new_progress;\r\n        this.gantt.trigger_event('progress_change', [this.task, new_progress]);\r\n    }\r\n\r\n    set_action_completed() {\r\n        this.action_completed = true;\r\n        setTimeout(() => (this.action_completed = false), 1000);\r\n    }\r\n\r\n    compute_start_end_date() {\r\n        const bar = this.$bar;\r\n        const x_in_units = bar.getX() / this.gantt.options.column_width;\r\n        const new_start_date = date_utils.add(\r\n            this.gantt.gantt_start,\r\n            x_in_units * this.gantt.options.step,\r\n            'hour'\r\n        );\r\n        const width_in_units = bar.getWidth() / this.gantt.options.column_width;\r\n        const new_end_date = date_utils.add(\r\n            new_start_date,\r\n            width_in_units * this.gantt.options.step,\r\n            'hour'\r\n        );\r\n\r\n        return { new_start_date, new_end_date };\r\n    }\r\n\r\n    compute_progress() {\r\n        const progress =\r\n            this.$bar_progress.getWidth() / this.$bar.getWidth() * 100;\r\n        return parseInt(progress, 10);\r\n    }\r\n\r\n    compute_x() {\r\n        const { step, column_width } = this.gantt.options;\r\n        const task_start = this.task._start;\r\n        const gantt_start = this.gantt.gantt_start;\r\n\r\n        const diff = date_utils.diff(task_start, gantt_start, 'hour');\r\n        let x = diff / step * column_width;\r\n\r\n        if (this.gantt.view_is('Month')) {\r\n            const diff = date_utils.diff(task_start, gantt_start, 'day');\r\n            x = diff * column_width / 30;\r\n        }\r\n        return x;\r\n    }\r\n\r\n    compute_y() {\r\n        return (\r\n            this.gantt.options.header_height +\r\n            this.gantt.options.padding +\r\n            this.task._index * (this.height + this.gantt.options.padding)\r\n        );\r\n    }\r\n\r\n    get_snap_position(dx) {\r\n        let odx = dx,\r\n            rem,\r\n            position;\r\n\r\n        if (this.gantt.view_is('Week')) {\r\n            rem = dx % (this.gantt.options.column_width / 7);\r\n            position =\r\n                odx -\r\n                rem +\r\n                (rem < this.gantt.options.column_width / 14\r\n                    ? 0\r\n                    : this.gantt.options.column_width / 7);\r\n        } else if (this.gantt.view_is('Month')) {\r\n            rem = dx % (this.gantt.options.column_width / 30);\r\n            position =\r\n                odx -\r\n                rem +\r\n                (rem < this.gantt.options.column_width / 60\r\n                    ? 0\r\n                    : this.gantt.options.column_width / 30);\r\n        } else {\r\n            rem = dx % this.gantt.options.column_width;\r\n            position =\r\n                odx -\r\n                rem +\r\n                (rem < this.gantt.options.column_width / 2\r\n                    ? 0\r\n                    : this.gantt.options.column_width);\r\n        }\r\n        return position;\r\n    }\r\n\r\n    update_attr(element, attr, value) {\r\n        value = +value;\r\n        if (!isNaN(value)) {\r\n            element.setAttribute(attr, value);\r\n        }\r\n        return element;\r\n    }\r\n\r\n    update_progressbar_position() {\r\n        this.$bar_progress.setAttribute('x', this.$bar.getX());\r\n        this.$bar_progress.setAttribute(\r\n            'width',\r\n            this.$bar.getWidth() * (this.task.progress / 100)\r\n        );\r\n    }\r\n\r\n    update_label_position() {\r\n        const bar = this.$bar,\r\n            label = this.group.querySelector('.bar-label');\r\n\r\n        if (label.getBBox().width > bar.getWidth()) {\r\n            label.classList.add('big');\r\n            label.setAttribute('x', bar.getX() + bar.getWidth() + 5);\r\n        } else {\r\n            label.classList.remove('big');\r\n            label.setAttribute('x', bar.getX() + bar.getWidth() / 2);\r\n        }\r\n    }\r\n\r\n    update_handle_position() {\r\n        const bar = this.$bar;\r\n        this.handle_group\r\n            .querySelector('.handle.left')\r\n            .setAttribute('x', bar.getX() + 1);\r\n        this.handle_group\r\n            .querySelector('.handle.right')\r\n            .setAttribute('x', bar.getEndX() - 9);\r\n        const handle = this.group.querySelector('.handle.progress');\r\n        handle &&\r\n            handle.setAttribute('points', this.get_progress_polygon_points());\r\n    }\r\n\r\n    update_arrow_position() {\r\n        this.arrows = this.arrows || [];\r\n        for (let arrow of this.arrows) {\r\n            arrow.update();\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}